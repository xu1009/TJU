###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         02/Jan/2017  20:53:07 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c           #
#    Command line       =  -f "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸Ð #
#                          Æ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11            #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wEndev.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DBLINK_LEDS) -f "I:\BaiduNetdiskDownload\5×éÍøÊµÑ #
#                          é\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\ #
#                          CC2530DB\f8wConfig.cfg" (-DSECURE=0                #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c" -D       #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D          #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC "I:\BaiduNetdiskDownload\5 #
#                          ×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                       #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\" -lA "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶ #
#                          È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11       #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\" --diag_suppress Pe001,Pa010 -o                 #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \" -e --debug --core=plain --dptr=16,1             #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸Ð #
#                          Æ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11            #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\" -I                #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I      #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\" -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊ #
#                          ª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11     #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\ #
#                          7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT1 #
#                          1 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO #
#                          MPONENTS\HAL\INCLUDE\" -I                          #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\" -I                    #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I                         #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "I:\BaiduNetdiskDownload\5×éÍ #
#                          øÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                          #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\" -I "I:\BaiduNetdiskDownload\5×é #
#                          ÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                         #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "I:\BaiduNetdiskDownload\5×é #
#                          ÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                         #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\" -I "I:\BaiduNetdiskDownload\5× #
#                          éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                        #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "I:\BaiduNetdiskDownload\5×é #
#                          ÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                         #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\" -I "I:\BaiduNetdiskDownload\5×é #
#                          ÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                         #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "I:\BaiduNetdiskDownload\5×éÍ #
#                          øÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                          #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\" -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑ #
#                          é\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\SERVICES\SADDR\" -I                     #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "I:\BaiduNetdiskDownload\5 #
#                          ×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                       #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\HIGH_LEVEL\" -I                         #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I                    #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz      #
#    List file          =  I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\SampleApp.lst                                    #
#    Object file        =  I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \SampleApp.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          #include "stdio.h"
     79          #include "hal_adc.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          #define COM0_COM1_CALLBACK   0
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     99          {
    100            SAMPLEAPP_PERIODIC_CLUSTERID,
    101            SAMPLEAPP_FLASH_CLUSTERID
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    105          {
    106            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    107            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    108            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    109            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    110            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    115          };
    116          
    117          // This is the Endpoint/Interface description.  It is defined here, but
    118          // filled-in in SampleApp_Init().  Another way to go would be to fill
    119          // in the structure here and make it a "const" (in code space).  The
    120          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * EXTERNAL VARIABLES
    125           */
    126          #if !defined( SERIAL_APP_TX_MAX )
    127          #define SERIAL_APP_TX_MAX  80
    128          #endif
    129          
    130          #define SERIAL_APP_LOOPBACK  1
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139                                    // This variable will be received when
    140                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
   \                     SerialApp_TxBuf:
   \   000000                DS 81
   \   000051                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    155          //´ËIDÎª²»Í¬ÖÕ¶ËµÄID£¬
    156          //·Ö±ðÎª1£¬2£¬3£¬¶ÔÓ¦3¸öÖÕ¶Ë

   \                                 In  segment XDATA_I, align 1, keep-with-next
    157          uint8 deviceID=3;
   \                     deviceID:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for deviceID>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          float PM_25=123.3,PM_10=123.3;
   \                     PM_25:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for PM_25>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     PM_10:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for PM_10>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          uint16 CO2 = 1000.0;
   \                     CO2:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for CO2>`
   \   000002                REQUIRE __INIT_XDATA_I
    160          //ÎÂ¶È±¨¾¯Öµ
    161          //³¬¹ýÕâ¸öÖµ·äÃùÆ÷±¨¾¯

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          uint8 tempLimit=35;
   \                     tempLimit:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for tempLimit>`
   \   000001                REQUIRE __INIT_XDATA_I
    163          
    164          //Êª¶È±¨¾¯
    165          //Ð¡ÓÚÕâ¸öÖµ·äÃùÆ÷±¨¾¯

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          uint8 humLimit=30;
   \                     humLimit:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for humLimit>`
   \   000001                REQUIRE __INIT_XDATA_I
    167          
    168          /*********************************************************************
    169           * LOCAL FUNCTIONS
    170           */
    171          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    172          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    173          void SampleApp_SendPeriodicMessage( void );
    174          void SampleApp_SendFlashMessage( uint16 flashTime );
    175          void SampleApp_Send_P2P_Message(void);
    176          void SetBuzzer(uint8 on);
    177          /*********************************************************************
    178           * NETWORK LAYER CALLBACKS
    179           */
    180          
    181          /*********************************************************************
    182           * PUBLIC FUNCTIONS
    183           */
    184          
    185          /*********************************************************************
    186           * @fn      SampleApp_Init
    187           *
    188           * @brief   Initialization function for the Generic App Task.
    189           *          This is called during initialization and should contain
    190           *          any application specific initialization (ie. hardware
    191           *          initialization/setup, table initialization, power up
    192           *          notificaiton ... ).
    193           *
    194           * @param   task_id - the ID assigned by OSAL.  This ID should be
    195           *                    used to send messages and set timers.
    196           *
    197           * @return  none
    198           */
    199          extern void macRadioUpdateTxPower(void);

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    200          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    201          {  
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    202            
    203            uint8 openPm[9] = {0xAA,0x01,0x00,0x00,0x00,0x00,0x01,0x66,0xbb};
   \   00000C   90....       MOV     DPTR,#`?<Constant {170, 1, 0, 0, 0, 0, 1, 102, 187}>`
   \   00000F   C082         PUSH    DPL
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   AC82         MOV     R4,DPL
   \   000019   AD83         MOV     R5,DPH
   \   00001B   7583..       MOV     DPH,#(`?<Constant {170, 1, 0, 0, 0, 0, 1, 102, 187}>` >> 8) & 0xff
   \   00001E   D082         POP     DPL
   \   000020   7409         MOV     A,#0x9
   \   000022   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    204           // uint8 setL[9] = {0xff,0x01,0x99,0x13,0x88,0x00,0x00,0x00,}
    205            SampleApp_TaskID = task_id;
   \   000025   EE           MOV     A,R6
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   F0           MOVX    @DPTR,A
    206            SampleApp_NwkState = DEV_INIT;
   \   00002A   90....       MOV     DPTR,#SampleApp_NwkState
   \   00002D   7401         MOV     A,#0x1
   \   00002F   F0           MOVX    @DPTR,A
    207            SampleApp_TransID = 0;
   \   000030   90....       MOV     DPTR,#SampleApp_TransID
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
    208            macRadioUpdateTxPower();
   \   000035                ; Setup parameters for call to function macRadioUpdateTxPower
   \   000035   12....       LCALL   ??macRadioUpdateTxPower?relay
    209            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000038                ; Setup parameters for call to function MT_UartInit
   \   000038   12....       LCALL   ??MT_UartInit?relay
    210            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   00003B                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00003B   EE           MOV     A,R6
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??MT_UartRegisterTaskID?relay
    211           // HalUARTWrite(0,"Uart0Init OK\n", sizeof("Uart0Init OK\n"));//´®¿Ú0·¢ËÍ
    212            //HalUARTWrite(1,"Uart1Init OK\n", sizeof("Uart1Init OK\n"));//´®¿Ú1·¢ËÍ
    213            //Ð­µ÷Æ÷ÉÏ½ÓÓÐÒ»¸ö·äÃùÆ÷  
    214            P0SEL &= ~0x80;                  //ÉèÖÃP0.7¿ÚÎªÆÕÍ¨IO
   \   000040   53F37F       ANL     0xf3,#0x7f
    215            P0DIR |= 0x80;                  //ÉèÖÃP0.7ÎªÊä³ö
   \   000043   43FD80       ORL     0xfd,#0x80
    216            SetBuzzer(0);
   \   000046                ; Setup parameters for call to function SetBuzzer
   \   000046   7900         MOV     R1,#0x0
   \   000048   12....       LCALL   ??SetBuzzer?relay
    217            
    218            HalUARTWrite(0,openPm,9);
   \   00004B                ; Setup parameters for call to function HalUARTWrite
   \   00004B   7C09         MOV     R4,#0x9
   \   00004D   7D00         MOV     R5,#0x0
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   AA82         MOV     R2,DPL
   \   000057   AB83         MOV     R3,DPH
   \   000059   7900         MOV     R1,#0x0
   \   00005B   12....       LCALL   ?Subroutine1 & 0xFFFF
    219              //MicroWait(2000);
    220            HalUARTWrite(0,openPm,9);
   \                     ??CrossCallReturnLabel_0:
   \   00005E   7900         MOV     R1,#0x0
   \   000060   12....       LCALL   ??HalUARTWrite?relay
    221             // MicroWait(2000);
    222            
    223            // Device hardware initialization can be added here or in main() (Zmain.c).
    224            // If the hardware is application specific - add it here.
    225            // If the hardware is other parts of the device add it in main().
    226          
    227           #if defined ( BUILD_ALL_DEVICES )
    228            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    229            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    230            // together - if they are - we will start up a coordinator. Otherwise,
    231            // the device will start as a router.
    232            if ( readCoordinatorJumper() )
    233              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    234            else
    235              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    236          #endif // BUILD_ALL_DEVICES
    237          
    238          #if defined ( HOLD_AUTO_START )
    239            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    240            //  from starting the device and wait for the application to
    241            //  start the device.
    242            ZDOInitDevice(0);
    243          #endif
    244          
    245            // Setup for the periodic message's destination address
    246            // Broadcast to everyone
    247            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000063   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000066   740F         MOV     A,#0xf
   \   000068   F0           MOVX    @DPTR,A
    248            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000069   A3           INC     DPTR
   \   00006A   7414         MOV     A,#0x14
   \   00006C   F0           MOVX    @DPTR,A
    249            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00006D   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000070   74FF         MOV     A,#-0x1
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   F0           MOVX    @DPTR,A
    250          
    251            // Setup for the flash command's destination address - Group 1
    252            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000075   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000078   7401         MOV     A,#0x1
   \   00007A   F0           MOVX    @DPTR,A
    253            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00007B   A3           INC     DPTR
   \   00007C   7414         MOV     A,#0x14
   \   00007E   F0           MOVX    @DPTR,A
    254            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   00007F   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000082   7401         MOV     A,#0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E4           CLR     A
   \   000087   F0           MOVX    @DPTR,A
    255            
    256            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000088   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   00008B   7402         MOV     A,#0x2
   \   00008D   F0           MOVX    @DPTR,A
    257            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00008E   A3           INC     DPTR
   \   00008F   7414         MOV     A,#0x14
   \   000091   F0           MOVX    @DPTR,A
    258            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000092   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000095   E4           CLR     A
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   F0           MOVX    @DPTR,A
    259          
    260            // Fill out the endpoint description.
    261            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000099   90....       MOV     DPTR,#SampleApp_epDesc
   \   00009C   7414         MOV     A,#0x14
   \   00009E   F0           MOVX    @DPTR,A
    262            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   00009F   A3           INC     DPTR
   \   0000A0   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   0000A2   F0           MOVX    @DPTR,A
   \   0000A3   A3           INC     DPTR
   \   0000A4   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   0000A6   F0           MOVX    @DPTR,A
    263            SampleApp_epDesc.simpleDesc
    264                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   0000A7   A3           INC     DPTR
   \   0000A8   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   0000AE   F0           MOVX    @DPTR,A
    265            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000AF   A3           INC     DPTR
   \   0000B0   E4           CLR     A
   \   0000B1   F0           MOVX    @DPTR,A
    266          
    267            // Register the endpoint description with the AF
    268            afRegister( &SampleApp_epDesc );
   \   0000B2                ; Setup parameters for call to function afRegister
   \   0000B2   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   0000B4   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000B6   12....       LCALL   ??afRegister?relay
    269          
    270            // Register for all key events - This app will handle all key events
    271            RegisterForKeys( SampleApp_TaskID );
   \   0000B9                ; Setup parameters for call to function RegisterForKeys
   \   0000B9   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F9           MOV     R1,A
   \   0000BE   12....       LCALL   ??RegisterForKeys?relay
    272          
    273            // By default, all devices start out in Group 1
    274            SampleApp_Group.ID = 0x0001;
   \   0000C1   90....       MOV     DPTR,#SampleApp_Group
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   F0           MOVX    @DPTR,A
   \   0000C7   A3           INC     DPTR
   \   0000C8   E4           CLR     A
   \   0000C9   F0           MOVX    @DPTR,A
    275            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   0000CA                ; Setup parameters for call to function osal_memcpy
   \   0000CA   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000CD   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000D0   F5..         MOV     ?V0 + 2,A
   \   0000D2   78..         MOV     R0,#?V0 + 0
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D7   7C07         MOV     R4,#0x7
   \   0000D9   7D00         MOV     R5,#0x0
   \   0000DB   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000DD   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000DF   12....       LCALL   ??osal_memcpy?relay
   \   0000E2   7403         MOV     A,#0x3
   \   0000E4   12....       LCALL   ?DEALLOC_XSTACK8
    276            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000E7                ; Setup parameters for call to function aps_AddGroup
   \   0000E7   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000E9   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000EB   7914         MOV     R1,#0x14
   \   0000ED   12....       LCALL   ??aps_AddGroup?relay
    277          
    278          #if defined ( LCD_SUPPORTED )
    279            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000F0                ; Setup parameters for call to function HalLcdWriteString
   \   0000F0   7901         MOV     R1,#0x1
   \   0000F2   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000F4   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000F6   12....       LCALL   ??HalLcdWriteString?relay
    280          #endif
    281          }
   \   0000F9   7409         MOV     A,#0x9
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FE   7F03         MOV     R7,#0x3
   \   000100   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000103                REQUIRE P0SEL
   \   000103                REQUIRE P0DIR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ??HalUARTWrite?relay
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003                ; Setup parameters for call to function HalUARTWrite
   \   000003   7C09         MOV     R4,#0x9
   \   000005   7D00         MOV     R5,#0x0
   \   000007   85..82       MOV     DPL,?XSP + 0
   \   00000A   85..83       MOV     DPH,?XSP + 1
   \   00000D   AA82         MOV     R2,DPL
   \   00000F   AB83         MOV     R3,DPH
   \   000011   22           RET
    282          
    283          /*********************************************************************
    284           * @fn      SampleApp_ProcessEvent
    285           *
    286           * @brief   Generic Application Task event processor.  This function
    287           *          is called to process all events for the task.  Events
    288           *          include timers, messages and any other user defined events.
    289           *
    290           * @param   task_id  - The OSAL assigned task ID.
    291           * @param   events - events to process.  This is a bit map and can
    292           *                   contain more than one event.
    293           *
    294           * @return  none
    295           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    296          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    297          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    298            afIncomingMSGPacket_t *MSGpkt;
    299            (void)task_id;  // Intentionally unreferenced parameter
    300          
    301            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    302            {
    303              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    304              while ( MSGpkt )
    305              {
    306                switch ( MSGpkt->hdr.event )
    307                {
    308                  // Received when a key is pressed
    309                  case KEY_CHANGE:
    310                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    311                    break;
    312          
    313                  // Received when a messages is received (OTA) for this endpoint
    314                  case AF_INCOMING_MSG_CMD:
    315                    SampleApp_MessageMSGCB( MSGpkt );
    316                    break;
    317          
    318                  // Received whenever the device changes state in the network
    319                  case ZDO_STATE_CHANGE:
    320                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    321                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    322                           (SampleApp_NwkState == DEV_ROUTER)
    323                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    324                    {
    325                      // Start sending the periodic message in a regular interval.
    326                      osal_start_timerEx( SampleApp_TaskID,
    327                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    328                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7C64         MOV     R4,#0x64
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    329                    }
    330                    else
    331                    {
    332                      // Device is no longer in the network
    333                    }
    334                    break;
    335          
    336                  default:
    337                    break;
    338                }
    339          
    340                // Release the memory
    341                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    342          
    343                // Next - if one is available
    344                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    345              }
    346          
    347              // return unprocessed events
    348              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    349            }
    350          
    351            // Send a message out - This event is generated by a timer
    352            //  (setup in SampleApp_Init()).
    353            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )   // ¶¨Ê±Æ÷Òç³öÖ®ºó²úÉú¸ÃÊÂ¼þ 
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    354            {
    355              // Send the periodic message
    356              //SampleApp_SendPeriodicMessage();
    357              SampleApp_Send_P2P_Message();
   \   000086                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000086   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    358          
    359              // Setup to send message again in normal period (+ a little jitter)
    360              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    361                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   2464         ADD     A,#0x64
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3400         ADDC    A,#0x0
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    362          
    363              // return unprocessed events
    364              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    365            }
    366          
    367            // Discard unknown events
    368            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    369          }
    370          
    371          /*********************************************************************
    372           * Event Generation Functions
    373           */
    374          /*********************************************************************
    375           * @fn      SampleApp_HandleKeys
    376           *
    377           * @brief   Handles all key events for this device.
    378           *
    379           * @param   shift - true if in shift/alt.
    380           * @param   keys - bit field for key events. Valid entries:
    381           *                 HAL_KEY_SW_2
    382           *                 HAL_KEY_SW_1
    383           *
    384           * @return  none
    385           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    386          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    387          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    388            (void)shift;  // Intentionally unreferenced parameter
    389            
    390            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    391            {
    392              /* This key sends the Flash Command is sent to Group 1.
    393               * This device will not receive the Flash Command from this
    394               * device (even if it belongs to group 1).
    395               */
    396              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    397            }
    398          
    399            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    400            {
    401              /* The Flashr Command is sent to Group 1.
    402               * This key toggles this device in and out of group 1.
    403               * If this device doesn't belong to group 1, this application
    404               * will not receive the Flash command sent to group 1.
    405               */
    406              aps_Group_t *grp;
    407              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    408              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    409              {
    410                // Remove from the group
    411                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    412              }
    413              else
    414              {
    415                // Add to the flash group
    416                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    417              }
    418            }
    419          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine7_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    420          
    421          /*********************************************************************
    422           * LOCAL FUNCTIONS
    423           */
    424          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    425          void SetBuzzer(uint8 on)
   \                     SetBuzzer:
    426          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    427            if(on>0)
   \   000000   E9           MOV     A,R1
   \   000001   6004         JZ      ??SetBuzzer_0
    428            {
    429              P0_7=0;
   \   000003   C287         CLR     0x80.7
   \   000005   8002         SJMP    ??SetBuzzer_1
    430            }
    431            else
    432            {
    433              P0_7=1;    
   \                     ??SetBuzzer_0:
   \   000007   D287         SETB    0x80.7
    434            }
    435          }
   \                     ??SetBuzzer_1:
   \   000009   02....       LJMP    ?BRET
   \   00000C                REQUIRE _A_P0
    436          
    437          /*********************************************************************
    438           * @fn      SampleApp_MessageMSGCB
    439           *
    440           * @brief   Data message processor callback.  This function processes
    441           *          any incoming data - probably from other devices.  So, based
    442           *          on cluster ID, perform the intended action.
    443           *
    444           * @param   none
    445           *
    446           * @return  none
    447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )   //Ð­µ÷Æ÷½ÓÊÕ
   \                     SampleApp_MessageMSGCB:
    449          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 50
   \   000005   74CE         MOV     A,#-0x32
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    450            uint16 flashTime;
    451            uint8 dataOfGet[50]={0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001A   7432         MOV     A,#0x32
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    452            uint8 buff[40]={0};
                         ^
Warning[Pe177]: variable "buff" was declared but never referenced
    453            uint8 index=0,temp=0, humidity=0;
                         ^
Warning[Pe177]: variable "index" was declared but never referenced

    uint8 index=0,temp=0, humidity=0;
                  ^
"I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",453  Warning[Pe177]: 
          variable "temp" was declared but never referenced

    uint8 index=0,temp=0, humidity=0;
                          ^
"I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",453  Warning[Pe177]: 
          variable "humidity" was declared but never referenced
    454            uint8 bAlarm=0;
                         ^
Warning[Pe177]: variable "bAlarm" was declared but never referenced
    455            switch ( pkt->clusterId )  
   \   00001F   EA           MOV     A,R2
   \   000020   2421         ADD     A,#0x21
   \   000022   F8           MOV     R0,A
   \   000023   EB           MOV     A,R3
   \   000024   3400         ADDC    A,#0x0
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   FC           MOV     R4,A
   \   000029   E9           MOV     A,R1
   \   00002A   FD           MOV     R5,A
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 0,A
   \   000036   A3           INC     DPTR
   \   000037   E0           MOVX    A,@DPTR
   \   000038   F5..         MOV     ?V0 + 1,A
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00003F   0200         DW        2
   \   000041   02           DB        2
   \   000042   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000044   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000046   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000048   ....         DW        ??SampleApp_MessageMSGCB_2
    456            {
    457              case SAMPLEAPP_P2P_CLUSTERID:
    458                {  
    459                //  HalUARTWrite(0, pkt->cmd.Data, strlen(pkt->cmd.Data)); 
    460                 // HalUARTWrite(0, dataOfGet, 130); 
    461                   dataOfGet[0]='I';
   \                     ??SampleApp_MessageMSGCB_2:
   \   00004A   85..82       MOV     DPL,?XSP + 0
   \   00004D   85..83       MOV     DPH,?XSP + 1
   \   000050   7449         MOV     A,#0x49
   \   000052   F0           MOVX    @DPTR,A
    462                   dataOfGet[1]='D';
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   7444         MOV     A,#0x44
   \   00005A   F0           MOVX    @DPTR,A
    463                   dataOfGet[33]=0x0d;
   \   00005B   7421         MOV     A,#0x21
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   740D         MOV     A,#0xd
   \   000062   F0           MOVX    @DPTR,A
    464                   dataOfGet[34]=0x0a;
   \   000063   7422         MOV     A,#0x22
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   740A         MOV     A,#0xa
   \   00006A   F0           MOVX    @DPTR,A
    465              // dataOfGet[2]=pkt->cmd.Data[0];//È¡³öÖÕ¶ËµÄË÷ÒýºÅ
    466               
    467             //  HalUARTWrite(0, pkt->cmd.Data, 1);
    468            //   if(index=='3')
    469              // {
    470                 //  HalUARTWrite(0,"get", 3);
    471                     for(int i = 0;i<31;i++)
   \   00006B   7800         MOV     R0,#0x0
   \   00006D   7900         MOV     R1,#0x0
    472                   { 
    473                     dataOfGet[i+2]=pkt->cmd.Data[i];
   \                     ??SampleApp_MessageMSGCB_3:
   \   00006F   8C82         MOV     DPL,R4
   \   000071   8D83         MOV     DPH,R5
   \   000073   E0           MOVX    A,@DPTR
   \   000074   28           ADD     A,R0
   \   000075   FA           MOV     R2,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   39           ADDC    A,R1
   \   000079   8A82         MOV     DPL,R2
   \   00007B   F583         MOV     DPH,A
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   C0E0         PUSH    A
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   E582         MOV     A,DPL
   \   000088   28           ADD     A,R0
   \   000089   F582         MOV     DPL,A
   \   00008B   E583         MOV     A,DPH
   \   00008D   39           ADDC    A,R1
   \   00008E   F583         MOV     DPH,A
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   D0E0         POP     A
   \   000094   F0           MOVX    @DPTR,A
    474                   }
   \   000095   E8           MOV     A,R0
   \   000096   2401         ADD     A,#0x1
   \   000098   08           INC     R0
   \   000099   E9           MOV     A,R1
   \   00009A   3400         ADDC    A,#0x0
   \   00009C   F9           MOV     R1,A
   \   00009D   C3           CLR     C
   \   00009E   E8           MOV     A,R0
   \   00009F   941F         SUBB    A,#0x1f
   \   0000A1   E9           MOV     A,R1
   \   0000A2   9400         SUBB    A,#0x0
   \   0000A4   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000A6   65D0         XRL     A,PSW
   \   0000A8   33           RLC     A
   \   0000A9   40C4         JC      ??SampleApp_MessageMSGCB_3
    475                  HalUARTWrite(0, dataOfGet, 35); 
   \   0000AB                ; Setup parameters for call to function HalUARTWrite
   \   0000AB   7C23         MOV     R4,#0x23
   \   0000AD   7D00         MOV     R5,#0x0
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   AA82         MOV     R2,DPL
   \   0000B7   AB83         MOV     R3,DPH
   \   0000B9   7900         MOV     R1,#0x0
   \   0000BB   12....       LCALL   ??HalUARTWrite?relay
    476               
    477             //  }
    478          //      switch(index)
    479          //      {
    480          //      case 0x31:
    481          //        for(int i = 2;i<27;i++)
    482          //        {dataOfGet[i]=pkt->cmd.Data[i-1];}
    483          //        break;
    484          //      case 0x32:
    485          //         for(int i = 27;i<52;i++)
    486          //         {dataOfGet[i]=pkt->cmd.Data[i-27];}
    487          //        break;
    488          //      case 0x33:
    489          //         for(int i = 52;i<77;i++)
    490          //         { dataOfGet[i]=pkt->cmd.Data[i-52];}
    491          //        break;
    492          //      case 0x34:
    493          //        for(int i = 77;i<102;i++)
    494          //        {  dataOfGet[i]=pkt->cmd.Data[i-77];}
    495          //        break;
    496          //      case 0x35:
    497          //         for(int i = 102;i<127;i++)
    498          //         {  dataOfGet[i]=pkt->cmd.Data[i-102];}
    499          //        break;
    500          //      //default:
    501          //       // break;   
    502          //      } 
    503                //  HalUARTWrite(0, dataOfGet, strlen(dataOfGet)); 
    504                break;    
   \   0000BE   8035         SJMP    ??SampleApp_MessageMSGCB_0
    505                }
    506              case SAMPLEAPP_PERIODIC_CLUSTERID:
    507                break;
    508          
    509              case SAMPLEAPP_FLASH_CLUSTERID:
    510                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    511                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000C0   8C82         MOV     DPL,R4
   \   0000C2   8D83         MOV     DPH,R5
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   F8           MOV     R0,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   F9           MOV     R1,A
   \   0000C9                ; Setup parameters for call to function HalLedBlink
   \   0000C9   8882         MOV     DPL,R0
   \   0000CB   8983         MOV     DPH,R1
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FA           MOV     R2,A
   \   0000D0   8882         MOV     DPL,R0
   \   0000D2   8983         MOV     DPH,R1
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   F9           MOV     R1,A
   \   0000D8   EA           MOV     A,R2
   \   0000D9   2400         ADD     A,#0x0
   \   0000DB   F5..         MOV     ?V0 + 0,A
   \   0000DD   E4           CLR     A
   \   0000DE   39           ADDC    A,R1
   \   0000DF   F5..         MOV     ?V0 + 1,A
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   78..         MOV     R0,#?V0 + 0
   \   0000E5   12....       LCALL   ?US_SHR
   \   0000E8   AC..         MOV     R4,?V0 + 0
   \   0000EA   AD..         MOV     R5,?V0 + 1
   \   0000EC   7B32         MOV     R3,#0x32
   \   0000EE   7A04         MOV     R2,#0x4
   \   0000F0   7908         MOV     R1,#0x8
   \   0000F2   12....       LCALL   ??HalLedBlink?relay
    512                break;
    513            }
    514          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   0000F5   7432         MOV     A,#0x32
   \   0000F7   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine7_0
   \   000003                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    515          void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    516          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    517            (void)port;
    518          
    519              if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)))
   \   000009   7407         MOV     A,#0x7
   \   00000B   5F           ANL     A,R7
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??SerialApp_CallBack_0 & 0xFFFF
    520              {
    521                  if (SerialApp_TxLen < SERIAL_APP_TX_MAX)
   \   000011   90....       MOV     DPTR,#SerialApp_TxLen
   \   000014   E0           MOVX    A,@DPTR
   \   000015   C3           CLR     C
   \   000016   9450         SUBB    A,#0x50
   \   000018   4003         JC      $+5
   \   00001A   02....       LJMP    ??SerialApp_CallBack_0 & 0xFFFF
    522                  {
    523                      SerialApp_TxLen = HalUARTRead(port, SerialApp_TxBuf, SERIAL_APP_TX_MAX);
    524                      if (SerialApp_TxLen)
   \   00001D                ; Setup parameters for call to function HalUARTRead
   \   00001D   7C50         MOV     R4,#0x50
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   7A..         MOV     R2,#SerialApp_TxBuf & 0xff
   \   000023   7B..         MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
   \   000025   12....       LCALL   ??HalUARTRead?relay
   \   000028   EA           MOV     A,R2
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??SerialApp_CallBack_1 & 0xFFFF
    525                      {
    526          #if COM0_COM1_CALLBACK            
    527                          //ÊÕµ½ÄÄ¸ö´®¿ÚµÄÊý¾Ý¾Í´ÓÐ´»Øµ½ÄÄ¸ö´®¿ÚÖÐÈ¥
    528                          //ÎÒÃÇ×öµÄÊÇ»Ø
    529                          HalUARTWrite(port, SerialApp_TxBuf, SerialApp_TxLen);
    530          #else
    531                      //Ë«´®¿Ú»¥´í´«Êä
    532                      //´®¿Ú0·¢---> ´®¿Ú1ÊÕ
    533                      //´®¿Ú1·¢---> ´®¿Ú0ÊÕ
    534          
    535                          if(port==1)     //´®¿Ú1
   \   00002E   7401         MOV     A,#0x1
   \   000030   6E           XRL     A,R6
   \   000031   90....       MOV     DPTR,#SerialApp_TxBuf
   \   000034   704B         JNZ     ??SerialApp_CallBack_2
    536                          {
    537                           if(SerialApp_TxBuf[0]==0xff&&SerialApp_TxBuf[1]==0x86)
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F4           CPL     A
   \   000038   6003         JZ      $+5
   \   00003A   02....       LJMP    ??SerialApp_CallBack_1 & 0xFFFF
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6486         XRL     A,#0x86
   \   000041   6003         JZ      $+5
   \   000043   02....       LJMP    ??SerialApp_CallBack_1 & 0xFFFF
    538                           {
    539                           
    540                           
    541                          if(((0xff-((SerialApp_TxBuf[1]+SerialApp_TxBuf[2]+SerialApp_TxBuf[3]+SerialApp_TxBuf[4]+SerialApp_TxBuf[5]+SerialApp_TxBuf[6]+SerialApp_TxBuf[7])&0xff))+1)==SerialApp_TxBuf[8])
   \   000046   90....       MOV     DPTR,#SerialApp_TxBuf + 3
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   FA           MOV     R2,A
   \   00004B   90....       MOV     DPTR,#SerialApp_TxBuf + 2
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F8           MOV     R0,A
   \   000050   2A           ADD     A,R2
   \   000051   FC           MOV     R4,A
   \   000052   90....       MOV     DPTR,#SerialApp_TxBuf + 4
   \   000055   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000058   FC           MOV     R4,A
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00005D   2486         ADD     A,#-0x7a
   \   00005F   FC           MOV     R4,A
   \   000060   E4           CLR     A
   \   000061   C3           CLR     C
   \   000062   9C           SUBB    A,R4
   \   000063   FC           MOV     R4,A
   \   000064   7401         MOV     A,#0x1
   \   000066   9400         SUBB    A,#0x0
   \   000068   FD           MOV     R5,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6C           XRL     A,R4
   \   00006C   7001         JNZ     ??SerialApp_CallBack_3
   \   00006E   ED           MOV     A,R5
   \                     ??SerialApp_CallBack_3:
   \   00006F   6003         JZ      $+5
   \   000071   02....       LJMP    ??SerialApp_CallBack_1 & 0xFFFF
    542                           {
    543                           CO2 = SerialApp_TxBuf[2]*256+SerialApp_TxBuf[3];
   \   000074   E8           MOV     A,R0
   \   000075   F9           MOV     R1,A
   \   000076   EA           MOV     A,R2
   \   000077   90....       MOV     DPTR,#CO2
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   \   00007C   E9           MOV     A,R1
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   02....       LJMP    ??SerialApp_CallBack_1 & 0xFFFF
    544                           
    545                           }
    546                           
    547                           }
    548                             //HalUARTWrite(1, SerialApp_TxBuf, SerialApp_TxLen);
    549                          }
    550                          else    //´®¿Ú0
    551                            
    552                          {
    553                           //  HalUARTWrite(0, SerialApp_TxBuf, SerialApp_TxLen);
    554                             //HalUARTWrite(0, "get", 3);
    555                             if(SerialApp_TxBuf[0]==0xaa&&SerialApp_TxBuf[1]==0x02)
   \                     ??SerialApp_CallBack_2:
   \   000081   E0           MOVX    A,@DPTR
   \   000082   64AA         XRL     A,#0xaa
   \   000084   6003         JZ      $+5
   \   000086   02....       LJMP    ??SerialApp_CallBack_1 & 0xFFFF
   \   000089   A3           INC     DPTR
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   6402         XRL     A,#0x2
   \   00008D   707C         JNZ     ??SerialApp_CallBack_1
    556                             {
    557                                //HalUARTWrite(0, SerialApp_TxBuf, SerialApp_TxLen);
    558                               //  HalUARTWrite(0, "getit", 5);
    559                               if((SerialApp_TxBuf[0]+SerialApp_TxBuf[1]+SerialApp_TxBuf[2]+SerialApp_TxBuf[3]+SerialApp_TxBuf[4]+SerialApp_TxBuf[5]+SerialApp_TxBuf[8])==(SerialApp_TxBuf[6]*256+SerialApp_TxBuf[7]))
   \   00008F   90....       MOV     DPTR,#SerialApp_TxBuf + 5
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F5..         MOV     ?V0 + 0,A
   \   000095   90....       MOV     DPTR,#SerialApp_TxBuf + 4
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F8           MOV     R0,A
   \   00009A   90....       MOV     DPTR,#SerialApp_TxBuf + 3
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   FC           MOV     R4,A
   \   00009F   90....       MOV     DPTR,#SerialApp_TxBuf + 2
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   FA           MOV     R2,A
   \   0000A4   2C           ADD     A,R4
   \   0000A5   F5..         MOV     ?V0 + 2,A
   \   0000A7   E4           CLR     A
   \   0000A8   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000AB   28           ADD     A,R0
   \   0000AC   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   0000AF   25..         ADD     A,?V0 + 0
   \   0000B1   F5..         MOV     ?V0 + 2,A
   \   0000B3   E5..         MOV     A,?V0 + 3
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   F5..         MOV     ?V0 + 3,A
   \   0000B9   90....       MOV     DPTR,#SerialApp_TxBuf + 8
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   F5..         MOV     ?V0 + 4,A
   \   0000BF   E5..         MOV     A,?V0 + 2
   \   0000C1   25..         ADD     A,?V0 + 4
   \   0000C3   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000C6   24AC         ADD     A,#-0x54
   \   0000C8   F5..         MOV     ?V0 + 4,A
   \   0000CA   E5..         MOV     A,?V0 + 3
   \   0000CC   3400         ADDC    A,#0x0
   \   0000CE   F5..         MOV     ?V0 + 5,A
   \   0000D0   90....       MOV     DPTR,#SerialApp_TxBuf + 6
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   F5..         MOV     ?V0 + 3,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F5..         MOV     ?V0 + 6,A
   \   0000DA   E4           CLR     A
   \   0000DB   25..         ADD     A,?V0 + 6
   \   0000DD   65..         XRL     A,?V0 + 4
   \   0000DF   7004         JNZ     ??SerialApp_CallBack_4
   \   0000E1   E5..         MOV     A,?V0 + 3
   \   0000E3   65..         XRL     A,?V0 + 5
   \                     ??SerialApp_CallBack_4:
   \   0000E5   7024         JNZ     ??SerialApp_CallBack_1
    560                               {
    561                                 
    562                               PM_25 = (SerialApp_TxBuf[4])*256+(SerialApp_TxBuf[5]);
   \   0000E7   E8           MOV     A,R0
   \   0000E8   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000EB   12....       LCALL   ?L_TO_FLT
   \   0000EE   90....       MOV     DPTR,#PM_25
   \   0000F1   78..         MOV     R0,#?V0 + 0
   \   0000F3   12....       LCALL   ?L_MOV_TO_X
    563                               PM_10 = (SerialApp_TxBuf[2])*256+(SerialApp_TxBuf[3]);
   \   0000F6   EA           MOV     A,R2
   \   0000F7   FB           MOV     R3,A
   \   0000F8   E4           CLR     A
   \   0000F9   2C           ADD     A,R4
   \   0000FA   F5..         MOV     ?V0 + 0,A
   \   0000FC   EB           MOV     A,R3
   \   0000FD   12....       LCALL   ?Subroutine4 & 0xFFFF
    564                             
    565                               }
    566                             
    567                             }
    568                          }
    569          #endif
    570                       }            
   \                     ??CrossCallReturnLabel_7:
   \   000100   12....       LCALL   ?L_TO_FLT
   \   000103   90....       MOV     DPTR,#PM_10
   \   000106   78..         MOV     R0,#?V0 + 0
   \   000108   12....       LCALL   ?L_MOV_TO_X
    571          
    572                      SerialApp_TxLen = 0;
   \                     ??SerialApp_CallBack_1:
   \   00010B   90....       MOV     DPTR,#SerialApp_TxLen
   \   00010E   E4           CLR     A
   \   00010F   F0           MOVX    @DPTR,A
    573                  }
    574              }
    575          }
   \                     ??SerialApp_CallBack_0:
   \   000110   7F08         MOV     R7,#0x8
   \   000112   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004                REQUIRE ??Subroutine6_0
   \   000004                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   EC           MOV     A,R4
   \   000004   25..         ADD     A,?V0 + 0
   \   000006   FC           MOV     R4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0 + 0,A
   \   00000B   EC           MOV     A,R4
   \   00000C   25..         ADD     A,?V0 + 0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F5..         MOV     ?V0 + 1,A
   \   000002   33           RLC     A
   \   000003   95E0         SUBB    A,0xE0 /* A   */
   \   000005   F5..         MOV     ?V0 + 2,A
   \   000007   F5..         MOV     ?V0 + 3,A
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET
    576          /*********************************************************************
    577           * @fn      SampleApp_SendPeriodicMessage
    578           *
    579           * @brief   Send the periodic message.
    580           *
    581           * @param   none
    582           *
    583           * @return  none
    584           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    585          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    586          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    587            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    588                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    589                                 1,
    590                                 (uint8*)&SampleAppPeriodicCounter,
    591                                 &SampleApp_TransID,
    592                                 AF_DISCV_ROUTE,
    593                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   80..         SJMP    ?Subroutine0
    594            {
    595            }
    596            else
    597            {
    598              // Error occurred in request to send.
    599            }
    600          }
    601          
    602          /*********************************************************************
    603           * @fn      SampleApp_SendFlashMessage
    604           *
    605           * @brief   Send the flash message to group 1.
    606           *
    607           * @param   flashTime - in milliseconds
    608           *
    609           * @return  none
    610           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    611          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    612          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    613            uint8 buffer[3];
    614            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    615            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    616            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    617          
    618            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    619                                 SAMPLEAPP_FLASH_CLUSTERID,
    620                                 3,
    621                                 buffer,
    622                                 &SampleApp_TransID,
    623                                 AF_DISCV_ROUTE,
    624                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    625            {
    626            }
    627            else
    628            {
    629              // Error occurred in request to send.
    630            }
    631          }
   \   000071   7403         MOV     A,#0x3
   \   000073                REQUIRE ?Subroutine0
   \   000073                ; // Fall through to label ?Subroutine0
    632          
    633          /*********************************************************************
    634           * @fn      SampleApp_Send_P2P_Message
    635           *
    636           * @brief   point to point.
    637           *
    638           * @param   none
    639           *
    640           * @return  none
    641           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    642          void SampleApp_Send_P2P_Message( void )   // ×Ó½Úµã·¢ËÍÐÅÏ¢µ½Ð­µ÷Æ÷Êý¾ÝÔÚ´Ë»ã×Ü£¬·¢ËÍÖÜÆÚÓÉ¶¨Ê±Æ÷¾ö¶¨
   \                     SampleApp_Send_P2P_Message:
    643          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 68
   \   000005   74BC         MOV     A,#-0x44
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    644           //MicroWait(200); 
    645           
    646            uint8 readData[9] = {0xaa,0x02,0x00,0x00,0x00,0x00,0x01,0x67,0xbb};
   \   00000A   7409         MOV     A,#0x9
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7583..       MOV     DPH,#(`?<Constant {170, 2, 0, 0, 0, 0, 1, 103, 187}>` >> 8) & 0xff
   \   000016   7582..       MOV     DPL,#`?<Constant {170, 2, 0, 0, 0, 0, 1, 103, 187}>` & 0xff
   \   000019   7409         MOV     A,#0x9
   \   00001B   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    647            uint8 readCo2[9] =  {0xff,0x01,0x86,0x00,0x00,0x00,0x00,0x00,0x79};
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   AC82         MOV     R4,DPL
   \   000026   AD83         MOV     R5,DPH
   \   000028   7583..       MOV     DPH,#(`?<Constant {255, 1, 134, 0, 0, 0, 0, 0, 121}>` >> 8) & 0xff
   \   00002B   7582..       MOV     DPL,#`?<Constant {255, 1, 134, 0, 0, 0, 0, 0, 121}>` & 0xff
   \   00002E   7409         MOV     A,#0x9
   \   000030   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    648            uint8 strTemp[50]={0};
   \   000033   7412         MOV     A,#0x12
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   AC82         MOV     R4,DPL
   \   00003A   AD83         MOV     R5,DPH
   \   00003C   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   00003F   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   000042   7432         MOV     A,#0x32
   \   000044   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    649            //uint8 wnd[4] = {0};
    650            float vol=0.0,fengya=-12.3; //adc²ÉÑùµçÑ¹  
    651            float temp=0.0; //±£´æÎÂ¶È
    652            float humidity=0.0;//±£´æÊª¶È
    653            //uint8 start1 = 'I';
    654           // uint8 start2 = 'D';
    655            
    656           
    657          
    658           HalUARTWrite(0,readData,9);
   \   000047                ; Setup parameters for call to function HalUARTWrite
   \   000047   7C09         MOV     R4,#0x9
   \   000049   FD           MOV     R5,A
   \   00004A   EC           MOV     A,R4
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   ??HalUARTWrite?relay
    659           // MicroWait(200);
    660           HalUARTWrite(0,readData,9);
   \   000057                ; Setup parameters for call to function HalUARTWrite
   \   000057   7C09         MOV     R4,#0x9
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   EC           MOV     A,R4
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   AA82         MOV     R2,DPL
   \   000061   AB83         MOV     R3,DPH
   \   000063   7900         MOV     R1,#0x0
   \   000065   12....       LCALL   ?Subroutine3 & 0xFFFF
    661           MicroWait(200);
    662           
    663           HalUARTWrite(1,readCo2,9);
   \                     ??CrossCallReturnLabel_4:
   \   000068                ; Setup parameters for call to function HalUARTWrite
   \   000068   7C09         MOV     R4,#0x9
   \   00006A   7D00         MOV     R5,#0x0
   \   00006C   85..82       MOV     DPL,?XSP + 0
   \   00006F   85..83       MOV     DPH,?XSP + 1
   \   000072   AA82         MOV     R2,DPL
   \   000074   AB83         MOV     R3,DPH
   \   000076   7901         MOV     R1,#0x1
   \   000078   12....       LCALL   ?Subroutine1 & 0xFFFF
    664           // MicroWait(200);
    665           HalUARTWrite(1,readCo2,9);
   \                     ??CrossCallReturnLabel_1:
   \   00007B   7901         MOV     R1,#0x1
   \   00007D   12....       LCALL   ?Subroutine3 & 0xFFFF
    666            
    667           MicroWait(200);
    668            //MicroWait(200);
    669            uint16 adc= HalAdcRead(HAL_ADC_CHANNEL_6, HAL_ADC_RESOLUTION_14);  // P0_6
   \                     ??CrossCallReturnLabel_5:
   \   000080                ; Setup parameters for call to function HalAdcRead
   \   000080   7A04         MOV     R2,#0x4
   \   000082   7906         MOV     R1,#0x6
   \   000084   12....       LCALL   ??HalAdcRead?relay
    670             //×î´ó²ÉÑùÖµ8192(ÒòÎª×î¸ßÎ»ÊÇ·ûºÅÎ»)
    671              if(adc>=8192)
    672              {
    673                 // sprintf(&str_adc[6], "error");
    674                //  len=11;
    675              }
    676              else
    677              {
    678                 //Êä³öµçÑ¹
    679                  vol=(float)((float)(adc*3.3))/8192.0;
    680                  if(vol<0.4||vol>2.0)
    681                  {
    682                  }
    683                  else
    684                  {
    685                  
    686                  vol = 125*(vol-0.4)-100;
    687                  
    688                  }
    689                  //È¡Ð¡ÊýµãµÄ3Î»£¬·Å´ó1000±¶
    690                  adc=vol*1000;
                            ^
Warning[Pa093]: implicit conversion from floating point to integer
    691                  
    692              
    693              }
    694            DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   000087                ; Setup parameters for call to function DHT11
   \   000087   12....       LCALL   ??DHT11?relay
    695            temp=wendu_shi*10+wendu_ge+((float)(wendu_p))/10;//¸ù¾ÝÊ®Î»ºÍ¸öÎ»¼ÆËãÎÂ¶È
   \   00008A   90....       MOV     DPTR,#wendu_shi
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   75F00A       MOV     B,#0xa
   \   000091   A4           MUL     AB
   \   000092   F8           MOV     R0,A
   \   000093   90....       MOV     DPTR,#wendu_ge
   \   000096   E0           MOVX    A,@DPTR
   \   000097   FA           MOV     R2,A
   \   000098   E8           MOV     A,R0
   \   000099   2A           ADD     A,R2
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   E5F0         MOV     A,B
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A3   12....       LCALL   ?L_TO_FLT
   \   0000A6   90....       MOV     DPTR,#wendu_p
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F5..         MOV     ?V0 + 4,A
   \   0000AC   E4           CLR     A
   \   0000AD   F5..         MOV     ?V0 + 5,A
   \   0000AF   F5..         MOV     ?V0 + 6,A
   \   0000B1   F5..         MOV     ?V0 + 7,A
   \   0000B3   78..         MOV     R0,#?V0 + 4
   \   0000B5   12....       LCALL   ?UL_TO_FLT
   \   0000B8   90....       MOV     DPTR,#__Constant_41200000
   \   0000BB   78..         MOV     R0,#?V0 + 8
   \   0000BD   12....       LCALL   ?L_MOV_X
   \   0000C0   78..         MOV     R0,#?V0 + 4
   \   0000C2   79..         MOV     R1,#?V0 + 8
   \   0000C4   12....       LCALL   ?FLT_DIV
   \   0000C7   78..         MOV     R0,#?V0 + 0
   \   0000C9   79..         MOV     R1,#?V0 + 4
   \   0000CB   12....       LCALL   ?FLT_ADD
    696            humidity=shidu_shi*10+shidu_ge+((float)(shidu_p))/10;//¸ù¾ÝÊ®Î»ºÍ¸öÎ»¼ÆËãÊª¶È  
    697            //ÏÔÊ¾µ±Ç°ÖÕ¶Ë
    698           // sprintf(strTemp, "ÖÕ¶Ë%d", deviceID);
    699            //HalLcdWriteString( strTemp, HAL_LCD_LINE_3 );
    700          
    701            //¸ñÊ½»¯ÎÂÊª¶ÈÍ¬£¬²¢LCDÏÔÊ¾
    702            //sprintf(strTemp, "ÎÂ¶È:%02d Êª¶È:%02d", temp, humidity);
    703            //HalLcdWriteString( strTemp, HAL_LCD_LINE_4 );
    704          
    705            //´®¿ÚÊä³öÊý¾Ý
    706            //HalUARTWrite(0,strTemp,osal_strlen(strTemp));
    707           // HalUARTWrite(0, "\n",1);
    708          
    709            //¸ñÊ½»¯Êý¾Ý£¬ÓÃÓÚÎÞÏß·¢ËÍ
    710          //  strTemp[0]=deviceID;//Ôö¼ÓÖÕ¶ËµÄIDµ½ÎÞÏßÐÅÏ¢ÉÏ
    711          //  
    712          //  strTemp[1] = 12;   //·çÑ¹
    713          //  strTemp[2] = 3;   //·çÑ¹
    714          //  
    715          //  strTemp[2] = 12;  //pm2.5
    716          //  strTemp[3] = 34;  //pm2.5
    717          //  
    718          //  strTemp[4] = 12;  //pm10
    719          //  strTemp[5] = 34;  //pm10
    720          //  
    721          //  strTemp[6]=humidity;//Êª¶È
    722          //  strTemp[7] = shidu_p;  //Êª¶È
    723          //  
    724          //  strTemp[8]=temp;//ÎÂ¶È
    725          //  strTemp[9]=wendu_p;//ÎÂ¶È
    726            sprintf(strTemp, "%d%05.1f%05.1f%05.1f%05.1f%05.1f%05d", deviceID, fengya,PM_25,PM_10,humidity,temp,CO2);
                           ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   0000CE                ; Setup parameters for call to function sprintf
   \   0000CE   90....       MOV     DPTR,#CO2
   \   0000D1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000D4   78..         MOV     R0,#?V0 + 0
   \   0000D6   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000D9   90....       MOV     DPTR,#shidu_shi
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   75F00A       MOV     B,#0xa
   \   0000E0   A4           MUL     AB
   \   0000E1   F8           MOV     R0,A
   \   0000E2   90....       MOV     DPTR,#shidu_ge
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   FA           MOV     R2,A
   \   0000E7   E8           MOV     A,R0
   \   0000E8   2A           ADD     A,R2
   \   0000E9   F5..         MOV     ?V0 + 4,A
   \   0000EB   E5F0         MOV     A,B
   \   0000ED   3400         ADDC    A,#0x0
   \   0000EF   F5..         MOV     ?V0 + 5,A
   \   0000F1   33           RLC     A
   \   0000F2   95E0         SUBB    A,0xE0 /* A   */
   \   0000F4   F5..         MOV     ?V0 + 6,A
   \   0000F6   F5..         MOV     ?V0 + 7,A
   \   0000F8   78..         MOV     R0,#?V0 + 4
   \   0000FA   12....       LCALL   ?L_TO_FLT
   \   0000FD   90....       MOV     DPTR,#shidu_p
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F5..         MOV     ?V0 + 8,A
   \   000103   E4           CLR     A
   \   000104   F5..         MOV     ?V0 + 9,A
   \   000106   F5..         MOV     ?V0 + 10,A
   \   000108   F5..         MOV     ?V0 + 11,A
   \   00010A   78..         MOV     R0,#?V0 + 8
   \   00010C   12....       LCALL   ?UL_TO_FLT
   \   00010F   90....       MOV     DPTR,#__Constant_41200000
   \   000112   78..         MOV     R0,#?V0 + 12
   \   000114   12....       LCALL   ?L_MOV_X
   \   000117   78..         MOV     R0,#?V0 + 8
   \   000119   79..         MOV     R1,#?V0 + 12
   \   00011B   12....       LCALL   ?FLT_DIV
   \   00011E   78..         MOV     R0,#?V0 + 4
   \   000120   79..         MOV     R1,#?V0 + 8
   \   000122   12....       LCALL   ?FLT_ADD
   \   000125   78..         MOV     R0,#?V0 + 4
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00012A   90....       MOV     DPTR,#PM_10
   \   00012D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000130   90....       MOV     DPTR,#PM_25
   \   000133   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000136   90....       MOV     DPTR,#__Constant_c144cccd
   \   000139   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00013C   90....       MOV     DPTR,#deviceID
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F5..         MOV     ?V0 + 4,A
   \   000142   75..00       MOV     ?V0 + 5,#0x0
   \   000145   78..         MOV     R0,#?V0 + 4
   \   000147   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014A   7C..         MOV     R4,#`?<Constant "%d%05.1f%05.1f%05.1f%...">` & 0xff
   \   00014C   7D..         MOV     R5,#(`?<Constant "%d%05.1f%05.1f%05.1f%...">` >> 8) & 0xff
   \   00014E   742A         MOV     A,#0x2a
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   AA82         MOV     R2,DPL
   \   000155   AB83         MOV     R3,DPH
   \   000157   12....       LCALL   ??sprintf?relay
   \   00015A   7418         MOV     A,#0x18
   \   00015C   12....       LCALL   ?DEALLOC_XSTACK8
    727            if(temp>0)
   \   00015F   90....       MOV     DPTR,#__Constant_1
   \   000162   78..         MOV     R0,#?V0 + 4
   \   000164   12....       LCALL   ?L_MOV_X
   \   000167   78..         MOV     R0,#?V0 + 0
   \   000169   79..         MOV     R1,#?V0 + 4
   \   00016B   12....       LCALL   ?FLT_GE
   \   00016E   5048         JNC     ??SampleApp_Send_P2P_Message_0
    728            if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    729                                 SAMPLEAPP_P2P_CLUSTERID,
    730                                 31, //·¢ËÍ³¤¶È
    731                                 strTemp,//·¢ËÍÖ¸Õë
    732                                 &SampleApp_TransID,
    733                                 AF_DISCV_ROUTE,
    734                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000170                ; Setup parameters for call to function AF_DataRequest
   \   000170   75..1E       MOV     ?V0 + 0,#0x1e
   \   000173   78..         MOV     R0,#?V0 + 0
   \   000175   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000178   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00017B   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00017E   78..         MOV     R0,#?V0 + 0
   \   000180   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000183   7415         MOV     A,#0x15
   \   000185   12....       LCALL   ?XSTACK_DISP0_8
   \   000188   8582..       MOV     ?V0 + 0,DPL
   \   00018B   8583..       MOV     ?V0 + 1,DPH
   \   00018E   78..         MOV     R0,#?V0 + 0
   \   000190   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000193   75..1F       MOV     ?V0 + 0,#0x1f
   \   000196   75..00       MOV     ?V0 + 1,#0x0
   \   000199   78..         MOV     R0,#?V0 + 0
   \   00019B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019E   75..04       MOV     ?V0 + 0,#0x4
   \   0001A1   78..         MOV     R0,#?V0 + 0
   \   0001A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A6   7920         MOV     R1,#0x20
   \   0001A8   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0001AA   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0001AC   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   0001AE   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   0001B0   12....       LCALL   ??AF_DataRequest?relay
   \   0001B3   7409         MOV     A,#0x9
   \   0001B5   12....       LCALL   ?DEALLOC_XSTACK8
    735            {
    736            }
    737            else
    738            {
    739              // Error occurred in request to send.
    740            }
    741          }
   \                     ??SampleApp_Send_P2P_Message_0:
   \   0001B8   7444         MOV     A,#0x44
   \   0001BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BD   7F10         MOV     R7,#0x10
   \   0001BF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ??HalUARTWrite?relay
   \   000003                ; Setup parameters for call to function Onboard_wait
   \   000003                ; Setup parameters for call to function Onboard_wait
   \   000003   7AC8         MOV     R2,#-0x38
   \   000005   7B00         MOV     R3,#0x0
   \   000007   12....       LCALL   ??Onboard_wait?relay
   \   00000A   22           RET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for deviceID>`:
   \   000000   03           DB 3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for PM_25>`:
   \   000000   9A99F642     DD 42F6999AH

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for PM_10>`:
   \   000000   9A99F642     DD 42F6999AH

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for CO2>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for tempLimit>`:
   \   000000   23           DB 35

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for humLimit>`:
   \   000000   1E           DB 30

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetBuzzer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetBuzzer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {170, 1, 0, 0, 0, 0, 1, 102, 187}>`:
   \   000000   AA           DB 170
   \   000001   01           DB 1
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   66           DB 102
   \   000008   BB           DB 187

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {170, 2, 0, 0, 0, 0, 1, 103, 187}>`:
   \   000000   AA           DB 170
   \   000001   02           DB 2
   \   000002   00           DB 0
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   67           DB 103
   \   000008   BB           DB 187

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 1, 134, 0, 0, 0, 0, 0, 121}>`:
   \   000000   FF           DB 255
   \   000001   01           DB 1
   \   000002   86           DB 134
   \   000003   00           DB 0
   \   000004   00           DB 0
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   00           DB 0
   \   000008   79           DB 121

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000021   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000029   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000031   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%d%05.1f%05.1f%05.1f%...">`:
   \   000000   25642530     DB "%d%05.1f%05.1f%05.1f%05.1f%05.1f%05d"
   \            352E3166
   \            2530352E
   \            31662530
   \            352E3166
   \            2530352E
   \            31662530
   \            352E3166
   \            25303564
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41200000:
   \   000000   00002041     DD 41200000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c144cccd:
   \   000000   CDCC44C1     DD 0C144CCCDH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1H
    742          /*********************************************************************
    743          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     2      0     23
       -> macRadioUpdateTxPower         0      0     40
       -> MT_UartInit                   0      0     40
       -> MT_UartRegisterTaskID         0      0     40
       -> SetBuzzer                     0      0     40
       -> HalUARTWrite                  0      0     40
       -> HalUARTWrite                  0      0     40
       -> afRegister                    0      0     40
       -> RegisterForKeys               0      0     40
       -> osal_memcpy                   0      0     46
       -> aps_AddGroup                  0      0     40
       -> HalLcdWriteString             0      0     40
     SampleApp_MessageMSGCB             2      0     72
       -> HalUARTWrite                  0      0    120
       -> HalLedBlink                   0      0    120
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         2      0    128
       -> HalUARTWrite                  0      0    184
       -> HalUARTWrite                  0      0    184
       -> Onboard_wait                  0      0    184
       -> HalUARTWrite                  0      0    184
       -> HalUARTWrite                  0      0    184
       -> Onboard_wait                  0      0    184
       -> HalAdcRead                    0      0    184
       -> DHT11                         0      0    184
       -> sprintf                       0      0    232
       -> AF_DataRequest                0      0    202
     SerialApp_CallBack                 0      0     16
       -> HalUARTRead                   0      0     32
     SetBuzzer                          0      0     20


   Segment part sizes:

     Function/Label                                Bytes
     --------------                                -----
     _A_P0                                            1
     P0SEL                                            1
     P0DIR                                            1
     SampleApp_ClusterList                            4
     SampleApp_SimpleDesc                            12
     SampleApp_epDesc                                 6
     SampleApp_TaskID                                 1
     SampleApp_NwkState                               1
     SampleApp_TransID                                1
     SampleApp_Periodic_DstAddr                      12
     SampleApp_Flash_DstAddr                         12
     SampleApp_P2P_DstAddr                           12
     SampleApp_Group                                 18
     SampleAppPeriodicCounter                         1
     SampleAppFlashCounter                            1
     SerialApp_TxBuf                                 81
     SerialApp_TxLen                                  1
     deviceID                                         1
     PM_25                                            4
     PM_10                                            4
     CO2                                              2
     tempLimit                                        1
     humLimit                                         1
     SampleApp_Init                                 259
     ?Subroutine1                                    18
     SampleApp_ProcessEvent                         176
     SampleApp_HandleKeys                            62
     ??Subroutine7_0                                  5
     SetBuzzer                                       12
     SampleApp_MessageMSGCB                         250
     ?Subroutine0                                     3
     SerialApp_CallBack                             277
     ?Subroutine5                                     4
     ??Subroutine6_0                                  7
     ?Subroutine2                                    15
     ?Subroutine4                                    12
     SampleApp_SendPeriodicMessage                   68
     SampleApp_SendFlashMessage                     115
     SampleApp_Send_P2P_Message                     450
     ?Subroutine3                                    11
     ?<Initializer for deviceID>                      1
     ?<Initializer for PM_25>                         4
     ?<Initializer for PM_10>                         4
     ?<Initializer for CO2>                           2
     ?<Initializer for tempLimit>                     1
     ?<Initializer for humLimit>                      1
     ??SampleApp_Init?relay                           6
     ??SampleApp_ProcessEvent?relay                   6
     ??SampleApp_HandleKeys?relay                     6
     ??SetBuzzer?relay                                6
     ??SampleApp_MessageMSGCB?relay                   6
     ??SerialApp_CallBack?relay                       6
     ??SampleApp_SendPeriodicMessage?relay            6
     ??SampleApp_SendFlashMessage?relay               6
     ??SampleApp_Send_P2P_Message?relay               6
     ?<Constant {170, 1, 0, 0, 0, 0, 1, 102, 187}>    9
     ?<Constant "Group 1">                            8
     ?<Constant "SampleApp">                         10
     ?<Constant {0}>                                 50
     ?<Constant {170, 2, 0, 0, 0, 0, 1, 103, 187}>    9
     ?<Constant {255, 1, 134, 0, 0, 0, 0, 0, 121}>    9
     ?<Constant {0}>_1                               50
     ?<Constant "%d%05.1f%05.1f%05.1f%...">          37
     __Constant_41200000                              4
     __Constant_c144cccd                              4
     __Constant_1                                     4

 
 1 744 bytes in segment BANKED_CODE
    54 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
    13 bytes in segment XDATA_I
    13 bytes in segment XDATA_ID
   210 bytes in segment XDATA_ROM_C
   147 bytes in segment XDATA_Z
 
 1 811 bytes of CODE  memory
   198 bytes of CONST memory (+ 12 bytes shared)
     0 bytes of DATA  memory (+  3 bytes shared)
   160 bytes of XDATA memory

Errors: none
Warnings: 7
