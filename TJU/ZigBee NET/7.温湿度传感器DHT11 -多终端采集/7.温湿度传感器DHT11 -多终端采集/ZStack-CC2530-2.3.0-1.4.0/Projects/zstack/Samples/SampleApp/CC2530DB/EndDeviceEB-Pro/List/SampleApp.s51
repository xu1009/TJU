///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        02/Jan/2017  20:53:07 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D /
//                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11              /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\Source\SampleApp.c         /
//    Command line       =  -f "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ /
//                          ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11          /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wEndev.cfg" (-DCPU32MHZ                  /
//                          -DROOT=__near_func -DBLINK_LEDS) -f               /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wConfig.cfg" (-DSECURE=0                 /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "I:\BaiduNetdiskDownload\5 /
//                          ×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                      /
//                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                   /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\Source\SampleApp.c" -D     /
//                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D         /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\" -lA "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂ /
//                          Êª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11   /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\" --diag_suppress Pe001,Pa010 -o              /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\O /
//                          bj\" -e --debug --core=plain --dptr=16,1          /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ /
//                          ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11          /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\" -I              /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I    /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI /
//                          2530DB\" -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7. /
//                          ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 /
//                           -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\C /
//                          OMPONENTS\MT\" -I "I:\BaiduNetdiskDownload\5×éÍøÊ /
//                          µÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                           /
//                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                   /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\HAL\INCLUDE\" -I                         /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\HAL\TARGET\CC2530EB\" -I                 /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\OSAL\MCU\CCSOC\" -I                      /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\OSAL\INCLUDE\" -I                        /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\AF\" -I "I:\BaiduNetdiskDownload\5 /
//                          ×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                      /
//                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                   /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\NWK\" -I                           /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SEC\" -I                           /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SAPI\" -I                          /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\SYS\" -I                           /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\STACK\ZDO\" -I                           /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\ZMAC\F8W\" -I "I:\BaiduNetdiskDownload\5 /
//                          ×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                      /
//                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                   /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\ZMAC\" -I "I:\BaiduNetdiskDownload\5×éÍø /
//                          ÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                          /
//                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                   /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\SERVICES\SADDR\" -I                      /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\SERVICES\SDATA\" -I                      /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\INCLUDE\" -I                         /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\HIGH_LEVEL\" -I                      /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\LOW_LEVEL\srf04\" -I                 /
//                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11             /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO /
//                          MPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz   /
//    List file          =  I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D /
//                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11              /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\L /
//                          ist\SampleApp.s51                                 /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_GE
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_TO_FLT
        EXTERN ?US_SHR
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SampleApp_SendFlashMessage?relay
        FUNCTION ??SampleApp_SendFlashMessage?relay,0203H
        PUBLIC ??SampleApp_SendPeriodicMessage?relay
        FUNCTION ??SampleApp_SendPeriodicMessage?relay,0203H
        PUBLIC ??SampleApp_Send_P2P_Message?relay
        FUNCTION ??SampleApp_Send_P2P_Message?relay,0203H
        PUBLIC ??SerialApp_CallBack?relay
        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC ??SetBuzzer?relay
        FUNCTION ??SetBuzzer?relay,0203H
        PUBLIC CO2
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBLIC PM_10
        PUBLIC PM_25
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 60, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SendFlashMessage
        FUNCTION SampleApp_SendFlashMessage,021203H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC SampleApp_SendPeriodicMessage
        FUNCTION SampleApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SampleApp_Send_P2P_Message
        FUNCTION SampleApp_Send_P2P_Message,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 116, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC SerialApp_CallBack
        FUNCTION SerialApp_CallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC SetBuzzer
        FUNCTION SetBuzzer,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBWEAK _A_P0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_41200000
        PUBWEAK __Constant_c144cccd
        PUBLIC deviceID
        PUBLIC humLimit
        PUBLIC tempLimit
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
macRadioUpdateTxPower SYMBOL "macRadioUpdateTxPower"
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_rand           SYMBOL "osal_rand"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
HalLedBlink         SYMBOL "HalLedBlink"
HalUARTRead         SYMBOL "HalUARTRead"
AF_DataRequest      SYMBOL "AF_DataRequest"
Onboard_wait        SYMBOL "Onboard_wait"
HalAdcRead          SYMBOL "HalAdcRead"
DHT11               SYMBOL "DHT11"
sprintf             SYMBOL "sprintf"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11?relay       SYMBOL "?relay", DHT11
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??macRadioUpdateTxPower?relay SYMBOL "?relay", macRadioUpdateTxPower
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SampleApp_SendFlashMessage SYMBOL "SampleApp_SendFlashMessage"
??SampleApp_SendFlashMessage?relay SYMBOL "?relay", SampleApp_SendFlashMessage
SampleApp_SendPeriodicMessage SYMBOL "SampleApp_SendPeriodicMessage"
??SampleApp_SendPeriodicMessage?relay SYMBOL "?relay", SampleApp_SendPeriodicMessage
SampleApp_Send_P2P_Message SYMBOL "SampleApp_Send_P2P_Message"
??SampleApp_Send_P2P_Message?relay SYMBOL "?relay", SampleApp_Send_P2P_Message
SerialApp_CallBack  SYMBOL "SerialApp_CallBack"
??SerialApp_CallBack?relay SYMBOL "?relay", SerialApp_CallBack
SetBuzzer           SYMBOL "SetBuzzer"
??SetBuzzer?relay   SYMBOL "?relay", SetBuzzer

        EXTERN macRadioUpdateTxPower
        FUNCTION macRadioUpdateTxPower,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 101, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??macRadioUpdateTxPower?relay
        FUNCTION ??macRadioUpdateTxPower?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN shidu_ge
        EXTERN shidu_p
        EXTERN shidu_shi
        EXTERN wendu_ge
        EXTERN wendu_p
        EXTERN wendu_shi

// I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "MT_UART.h"
//   75 #include "MT_APP.h"
//   76 #include "MT.h"
//   77 #include "DHT11.h"
//   78 #include "stdio.h"
//   79 #include "hal_adc.h"
//   80 
//   81 /*********************************************************************
//   82  * MACROS
//   83  */
//   84 
//   85 /*********************************************************************
//   86  * CONSTANTS
//   87  */
//   88 #define COM0_COM1_CALLBACK   0
//   89 /*********************************************************************
//   90  * TYPEDEFS
//   91  */
//   92 
//   93 /*********************************************************************
//   94  * GLOBAL VARIABLES
//   95  */
//   96 
//   97 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   98 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
//   99 {
//  100   SAMPLEAPP_PERIODIC_CLUSTERID,
//  101   SAMPLEAPP_FLASH_CLUSTERID
//  102 };
//  103 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  104 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SampleApp_ClusterList
//  105 {
//  106   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  107   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  108   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  109   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  110   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  111   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  112   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  113   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  114   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  115 };
//  116 
//  117 // This is the Endpoint/Interface description.  It is defined here, but
//  118 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  119 // in the structure here and make it a "const" (in code space).  The
//  120 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  121 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  122 
//  123 /*********************************************************************
//  124  * EXTERNAL VARIABLES
//  125  */
//  126 #if !defined( SERIAL_APP_TX_MAX )
//  127 #define SERIAL_APP_TX_MAX  80
//  128 #endif
//  129 
//  130 #define SERIAL_APP_LOOPBACK  1
//  131 /*********************************************************************
//  132  * EXTERNAL FUNCTIONS
//  133  */
//  134 
//  135 /*********************************************************************
//  136  * LOCAL VARIABLES
//  137  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139                           // This variable will be received when
//  140                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  144 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  148 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  149 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  150 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
SerialApp_TxBuf:
        DS 81
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  155 //´ËIDÎª²»Í¬ÖÕ¶ËµÄID£¬
//  156 //·Ö±ðÎª1£¬2£¬3£¬¶ÔÓ¦3¸öÖÕ¶Ë

        RSEG XDATA_I:XDATA:NOROOT(0)
//  157 uint8 deviceID=3;
deviceID:
        DATA8
        DS 1
        REQUIRE `?<Initializer for deviceID>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  158 float PM_25=123.3,PM_10=123.3;
PM_25:
        DATA32
        DS 4
        REQUIRE `?<Initializer for PM_25>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
PM_10:
        DATA32
        DS 4
        REQUIRE `?<Initializer for PM_10>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  159 uint16 CO2 = 1000.0;
CO2:
        DATA16
        DS 2
        REQUIRE `?<Initializer for CO2>`
        REQUIRE __INIT_XDATA_I
//  160 //ÎÂ¶È±¨¾¯Öµ
//  161 //³¬¹ýÕâ¸öÖµ·äÃùÆ÷±¨¾¯

        RSEG XDATA_I:XDATA:NOROOT(0)
//  162 uint8 tempLimit=35;
tempLimit:
        DATA8
        DS 1
        REQUIRE `?<Initializer for tempLimit>`
        REQUIRE __INIT_XDATA_I
//  163 
//  164 //Êª¶È±¨¾¯
//  165 //Ð¡ÓÚÕâ¸öÖµ·äÃùÆ÷±¨¾¯

        RSEG XDATA_I:XDATA:NOROOT(0)
//  166 uint8 humLimit=30;
humLimit:
        DATA8
        DS 1
        REQUIRE `?<Initializer for humLimit>`
        REQUIRE __INIT_XDATA_I
//  167 
//  168 /*********************************************************************
//  169  * LOCAL FUNCTIONS
//  170  */
//  171 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  172 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  173 void SampleApp_SendPeriodicMessage( void );
//  174 void SampleApp_SendFlashMessage( uint16 flashTime );
//  175 void SampleApp_Send_P2P_Message(void);
//  176 void SetBuzzer(uint8 on);
//  177 /*********************************************************************
//  178  * NETWORK LAYER CALLBACKS
//  179  */
//  180 
//  181 /*********************************************************************
//  182  * PUBLIC FUNCTIONS
//  183  */
//  184 
//  185 /*********************************************************************
//  186  * @fn      SampleApp_Init
//  187  *
//  188  * @brief   Initialization function for the Generic App Task.
//  189  *          This is called during initialization and should contain
//  190  *          any application specific initialization (ie. hardware
//  191  *          initialization/setup, table initialization, power up
//  192  *          notificaiton ... ).
//  193  *
//  194  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  195  *                    used to send messages and set timers.
//  196  *
//  197  * @return  none
//  198  */
//  199 extern void macRadioUpdateTxPower(void);

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  200 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  201 {  
        FUNCALL SampleApp_Init, macRadioUpdateTxPower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, SetBuzzer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        MOV     R6,A
//  202   
//  203   uint8 openPm[9] = {0xAA,0x01,0x00,0x00,0x00,0x00,0x01,0x66,0xbb};
        MOV     DPTR,#`?<Constant {170, 1, 0, 0, 0, 0, 1, 102, 187}>`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {170, 1, 0, 0, 0, 0, 1, 102, 187}>` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  204  // uint8 setL[9] = {0xff,0x01,0x99,0x13,0x88,0x00,0x00,0x00,}
//  205   SampleApp_TaskID = task_id;
        MOV     A,R6
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  206   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  207   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  208   macRadioUpdateTxPower();
        ; Setup parameters for call to function macRadioUpdateTxPower
        LCALL   ??macRadioUpdateTxPower?relay
//  209   MT_UartInit();                  //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  210   MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  211  // HalUARTWrite(0,"Uart0Init OK\n", sizeof("Uart0Init OK\n"));//´®¿Ú0·¢ËÍ
//  212   //HalUARTWrite(1,"Uart1Init OK\n", sizeof("Uart1Init OK\n"));//´®¿Ú1·¢ËÍ
//  213   //Ð­µ÷Æ÷ÉÏ½ÓÓÐÒ»¸ö·äÃùÆ÷  
//  214   P0SEL &= ~0x80;                  //ÉèÖÃP0.7¿ÚÎªÆÕÍ¨IO
        ANL     0xf3,#0x7f
//  215   P0DIR |= 0x80;                  //ÉèÖÃP0.7ÎªÊä³ö
        ORL     0xfd,#0x80
//  216   SetBuzzer(0);
        ; Setup parameters for call to function SetBuzzer
        MOV     R1,#0x0
        LCALL   ??SetBuzzer?relay
//  217   
//  218   HalUARTWrite(0,openPm,9);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ?Subroutine1 & 0xFFFF
//  219     //MicroWait(2000);
//  220   HalUARTWrite(0,openPm,9);
??CrossCallReturnLabel_0:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  221    // MicroWait(2000);
//  222   
//  223   // Device hardware initialization can be added here or in main() (Zmain.c).
//  224   // If the hardware is application specific - add it here.
//  225   // If the hardware is other parts of the device add it in main().
//  226 
//  227  #if defined ( BUILD_ALL_DEVICES )
//  228   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  229   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  230   // together - if they are - we will start up a coordinator. Otherwise,
//  231   // the device will start as a router.
//  232   if ( readCoordinatorJumper() )
//  233     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
//  234   else
//  235     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  236 #endif // BUILD_ALL_DEVICES
//  237 
//  238 #if defined ( HOLD_AUTO_START )
//  239   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  240   //  from starting the device and wait for the application to
//  241   //  start the device.
//  242   ZDOInitDevice(0);
//  243 #endif
//  244 
//  245   // Setup for the periodic message's destination address
//  246   // Broadcast to everyone
//  247   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  248   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  249   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  250 
//  251   // Setup for the flash command's destination address - Group 1
//  252   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  253   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  254   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  255   
//  256   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  257   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  258   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  259 
//  260   // Fill out the endpoint description.
//  261   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  262   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  263   SampleApp_epDesc.simpleDesc
//  264             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  265   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  266 
//  267   // Register the endpoint description with the AF
//  268   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  269 
//  270   // Register for all key events - This app will handle all key events
//  271   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  272 
//  273   // By default, all devices start out in Group 1
//  274   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  275   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  276   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  277 
//  278 #if defined ( LCD_SUPPORTED )
//  279   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  280 #endif
//  281 }
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE P0DIR
//  282 
//  283 /*********************************************************************
//  284  * @fn      SampleApp_ProcessEvent
//  285  *
//  286  * @brief   Generic Application Task event processor.  This function
//  287  *          is called to process all events for the task.  Events
//  288  *          include timers, messages and any other user defined events.
//  289  *
//  290  * @param   task_id  - The OSAL assigned task ID.
//  291  * @param   events - events to process.  This is a bit map and can
//  292  *                   contain more than one event.
//  293  *
//  294  * @return  none
//  295  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  296 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  297 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_Send_P2P_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  298   afIncomingMSGPacket_t *MSGpkt;
//  299   (void)task_id;  // Intentionally unreferenced parameter
//  300 
//  301   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  302   {
//  303     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  304     while ( MSGpkt )
//  305     {
//  306       switch ( MSGpkt->hdr.event )
//  307       {
//  308         // Received when a key is pressed
//  309         case KEY_CHANGE:
//  310           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  311           break;
//  312 
//  313         // Received when a messages is received (OTA) for this endpoint
//  314         case AF_INCOMING_MSG_CMD:
//  315           SampleApp_MessageMSGCB( MSGpkt );
//  316           break;
//  317 
//  318         // Received whenever the device changes state in the network
//  319         case ZDO_STATE_CHANGE:
//  320           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  321           if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  322                  (SampleApp_NwkState == DEV_ROUTER)
//  323               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  324           {
//  325             // Start sending the periodic message in a regular interval.
//  326             osal_start_timerEx( SampleApp_TaskID,
//  327                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  328                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  329           }
//  330           else
//  331           {
//  332             // Device is no longer in the network
//  333           }
//  334           break;
//  335 
//  336         default:
//  337           break;
//  338       }
//  339 
//  340       // Release the memory
//  341       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  342 
//  343       // Next - if one is available
//  344       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_7
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_7:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  345     }
//  346 
//  347     // return unprocessed events
//  348     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_8:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_9
//  349   }
//  350 
//  351   // Send a message out - This event is generated by a timer
//  352   //  (setup in SampleApp_Init()).
//  353   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )   // ¶¨Ê±Æ÷Òç³öÖ®ºó²úÉú¸ÃÊÂ¼þ 
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_10
//  354   {
//  355     // Send the periodic message
//  356     //SampleApp_SendPeriodicMessage();
//  357     SampleApp_Send_P2P_Message();
        ; Setup parameters for call to function SampleApp_Send_P2P_Message
        LCALL   ??SampleApp_Send_P2P_Message?relay
//  358 
//  359     // Setup to send message again in normal period (+ a little jitter)
//  360     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  361         (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#0x64
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  362 
//  363     // return unprocessed events
//  364     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_8
//  365   }
//  366 
//  367   // Discard unknown events
//  368   return 0;
??SampleApp_ProcessEvent_10:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_9:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  369 }
//  370 
//  371 /*********************************************************************
//  372  * Event Generation Functions
//  373  */
//  374 /*********************************************************************
//  375  * @fn      SampleApp_HandleKeys
//  376  *
//  377  * @brief   Handles all key events for this device.
//  378  *
//  379  * @param   shift - true if in shift/alt.
//  380  * @param   keys - bit field for key events. Valid entries:
//  381  *                 HAL_KEY_SW_2
//  382  *                 HAL_KEY_SW_1
//  383  *
//  384  * @return  none
//  385  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  386 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  387 {
        FUNCALL SampleApp_HandleKeys, SampleApp_SendFlashMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  388   (void)shift;  // Intentionally unreferenced parameter
//  389   
//  390   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  391   {
//  392     /* This key sends the Flash Command is sent to Group 1.
//  393      * This device will not receive the Flash Command from this
//  394      * device (even if it belongs to group 1).
//  395      */
//  396     SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
        ; Setup parameters for call to function SampleApp_SendFlashMessage
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??SampleApp_SendFlashMessage?relay
//  397   }
//  398 
//  399   if ( keys & HAL_KEY_SW_2 )
??SampleApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.1
        JNC     ??SampleApp_HandleKeys_1
//  400   {
//  401     /* The Flashr Command is sent to Group 1.
//  402      * This key toggles this device in and out of group 1.
//  403      * If this device doesn't belong to group 1, this application
//  404      * will not receive the Flash command sent to group 1.
//  405      */
//  406     aps_Group_t *grp;
//  407     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  408     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_HandleKeys_2
//  409     {
//  410       // Remove from the group
//  411       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_RemoveGroup?relay
        SJMP    ??SampleApp_HandleKeys_1
//  412     }
//  413     else
//  414     {
//  415       // Add to the flash group
//  416       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_2:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  417     }
//  418   }
//  419 }
??SampleApp_HandleKeys_1:
        LJMP    ??Subroutine7_0 & 0xFFFF
        CFI EndBlock cfiBlock2
//  420 
//  421 /*********************************************************************
//  422  * LOCAL FUNCTIONS
//  423  */
//  424 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  425 void SetBuzzer(uint8 on)
SetBuzzer:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SetBuzzer
        CODE
//  426 {
        ; Saved register size: 0
        ; Auto size: 0
//  427   if(on>0)
        MOV     A,R1
        JZ      ??SetBuzzer_0
//  428   {
//  429     P0_7=0;
        CLR     0x80.7
        SJMP    ??SetBuzzer_1
//  430   }
//  431   else
//  432   {
//  433     P0_7=1;    
??SetBuzzer_0:
        SETB    0x80.7
//  434   }
//  435 }
??SetBuzzer_1:
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE _A_P0
//  436 
//  437 /*********************************************************************
//  438  * @fn      SampleApp_MessageMSGCB
//  439  *
//  440  * @brief   Data message processor callback.  This function processes
//  441  *          any incoming data - probably from other devices.  So, based
//  442  *          on cluster ID, perform the intended action.
//  443  *
//  444  * @param   none
//  445  *
//  446  * @return  none
//  447  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  448 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )   //Ð­µ÷Æ÷½ÓÊÕ
SampleApp_MessageMSGCB:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  449 {
        FUNCALL SampleApp_MessageMSGCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLedBlink
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 60, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 60, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 50
        MOV     A,#-0x32
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 60)
//  450   uint16 flashTime;
//  451   uint8 dataOfGet[50]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x32
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  452   uint8 buff[40]={0};
//  453   uint8 index=0,temp=0, humidity=0;
//  454   uint8 bAlarm=0;
//  455   switch ( pkt->clusterId )  
        MOV     A,R2
        ADD     A,#0x21
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        CODE
//  456   {
//  457     case SAMPLEAPP_P2P_CLUSTERID:
//  458       {  
//  459       //  HalUARTWrite(0, pkt->cmd.Data, strlen(pkt->cmd.Data)); 
//  460        // HalUARTWrite(0, dataOfGet, 130); 
//  461          dataOfGet[0]='I';
??SampleApp_MessageMSGCB_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x49
        MOVX    @DPTR,A
//  462          dataOfGet[1]='D';
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x44
        MOVX    @DPTR,A
//  463          dataOfGet[33]=0x0d;
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xd
        MOVX    @DPTR,A
//  464          dataOfGet[34]=0x0a;
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  465     // dataOfGet[2]=pkt->cmd.Data[0];//È¡³öÖÕ¶ËµÄË÷ÒýºÅ
//  466      
//  467    //  HalUARTWrite(0, pkt->cmd.Data, 1);
//  468   //   if(index=='3')
//  469     // {
//  470        //  HalUARTWrite(0,"get", 3);
//  471            for(int i = 0;i<31;i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
//  472          { 
//  473            dataOfGet[i+2]=pkt->cmd.Data[i];
??SampleApp_MessageMSGCB_3:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  474          }
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1f
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??SampleApp_MessageMSGCB_3
//  475         HalUARTWrite(0, dataOfGet, 35); 
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x23
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  476      
//  477    //  }
//  478 //      switch(index)
//  479 //      {
//  480 //      case 0x31:
//  481 //        for(int i = 2;i<27;i++)
//  482 //        {dataOfGet[i]=pkt->cmd.Data[i-1];}
//  483 //        break;
//  484 //      case 0x32:
//  485 //         for(int i = 27;i<52;i++)
//  486 //         {dataOfGet[i]=pkt->cmd.Data[i-27];}
//  487 //        break;
//  488 //      case 0x33:
//  489 //         for(int i = 52;i<77;i++)
//  490 //         { dataOfGet[i]=pkt->cmd.Data[i-52];}
//  491 //        break;
//  492 //      case 0x34:
//  493 //        for(int i = 77;i<102;i++)
//  494 //        {  dataOfGet[i]=pkt->cmd.Data[i-77];}
//  495 //        break;
//  496 //      case 0x35:
//  497 //         for(int i = 102;i<127;i++)
//  498 //         {  dataOfGet[i]=pkt->cmd.Data[i-102];}
//  499 //        break;
//  500 //      //default:
//  501 //       // break;   
//  502 //      } 
//  503       //  HalUARTWrite(0, dataOfGet, strlen(dataOfGet)); 
//  504       break;    
        SJMP    ??SampleApp_MessageMSGCB_0
//  505       }
//  506     case SAMPLEAPP_PERIODIC_CLUSTERID:
//  507       break;
//  508 
//  509     case SAMPLEAPP_FLASH_CLUSTERID:
//  510       flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
//  511       HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
??SampleApp_MessageMSGCB_1:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        ; Setup parameters for call to function HalLedBlink
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?US_SHR
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,#0x32
        MOV     R2,#0x4
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
//  512       break;
//  513   }
//  514 }
??SampleApp_MessageMSGCB_0:
        MOV     A,#0x32
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  515 void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  516 {
        FUNCALL SerialApp_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  517   (void)port;
//  518 
//  519     if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)))
        MOV     A,#0x7
        ANL     A,R7
        JNZ     $+5
        LJMP    ??SerialApp_CallBack_0 & 0xFFFF
//  520     {
//  521         if (SerialApp_TxLen < SERIAL_APP_TX_MAX)
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x50
        JC      $+5
        LJMP    ??SerialApp_CallBack_0 & 0xFFFF
//  522         {
//  523             SerialApp_TxLen = HalUARTRead(port, SerialApp_TxBuf, SERIAL_APP_TX_MAX);
//  524             if (SerialApp_TxLen)
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        JNZ     $+5
        LJMP    ??SerialApp_CallBack_1 & 0xFFFF
//  525             {
//  526 #if COM0_COM1_CALLBACK            
//  527                 //ÊÕµ½ÄÄ¸ö´®¿ÚµÄÊý¾Ý¾Í´ÓÐ´»Øµ½ÄÄ¸ö´®¿ÚÖÐÈ¥
//  528                 //ÎÒÃÇ×öµÄÊÇ»Ø
//  529                 HalUARTWrite(port, SerialApp_TxBuf, SerialApp_TxLen);
//  530 #else
//  531             //Ë«´®¿Ú»¥´í´«Êä
//  532             //´®¿Ú0·¢---> ´®¿Ú1ÊÕ
//  533             //´®¿Ú1·¢---> ´®¿Ú0ÊÕ
//  534 
//  535                 if(port==1)     //´®¿Ú1
        MOV     A,#0x1
        XRL     A,R6
        MOV     DPTR,#SerialApp_TxBuf
        JNZ     ??SerialApp_CallBack_2
//  536                 {
//  537                  if(SerialApp_TxBuf[0]==0xff&&SerialApp_TxBuf[1]==0x86)
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??SerialApp_CallBack_1 & 0xFFFF
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x86
        JZ      $+5
        LJMP    ??SerialApp_CallBack_1 & 0xFFFF
//  538                  {
//  539                  
//  540                  
//  541                 if(((0xff-((SerialApp_TxBuf[1]+SerialApp_TxBuf[2]+SerialApp_TxBuf[3]+SerialApp_TxBuf[4]+SerialApp_TxBuf[5]+SerialApp_TxBuf[6]+SerialApp_TxBuf[7])&0xff))+1)==SerialApp_TxBuf[8])
        MOV     DPTR,#SerialApp_TxBuf + 3
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#SerialApp_TxBuf + 2
        MOVX    A,@DPTR
        MOV     R0,A
        ADD     A,R2
        MOV     R4,A
        MOV     DPTR,#SerialApp_TxBuf + 4
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     R4,A
        INC     DPTR
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        ADD     A,#-0x7a
        MOV     R4,A
        CLR     A
        CLR     C
        SUBB    A,R4
        MOV     R4,A
        MOV     A,#0x1
        SUBB    A,#0x0
        MOV     R5,A
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??SerialApp_CallBack_3
        MOV     A,R5
??SerialApp_CallBack_3:
        JZ      $+5
        LJMP    ??SerialApp_CallBack_1 & 0xFFFF
//  542                  {
//  543                  CO2 = SerialApp_TxBuf[2]*256+SerialApp_TxBuf[3];
        MOV     A,R0
        MOV     R1,A
        MOV     A,R2
        MOV     DPTR,#CO2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        LJMP    ??SerialApp_CallBack_1 & 0xFFFF
//  544                  
//  545                  }
//  546                  
//  547                  }
//  548                    //HalUARTWrite(1, SerialApp_TxBuf, SerialApp_TxLen);
//  549                 }
//  550                 else    //´®¿Ú0
//  551                   
//  552                 {
//  553                  //  HalUARTWrite(0, SerialApp_TxBuf, SerialApp_TxLen);
//  554                    //HalUARTWrite(0, "get", 3);
//  555                    if(SerialApp_TxBuf[0]==0xaa&&SerialApp_TxBuf[1]==0x02)
??SerialApp_CallBack_2:
        MOVX    A,@DPTR
        XRL     A,#0xaa
        JZ      $+5
        LJMP    ??SerialApp_CallBack_1 & 0xFFFF
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??SerialApp_CallBack_1
//  556                    {
//  557                       //HalUARTWrite(0, SerialApp_TxBuf, SerialApp_TxLen);
//  558                      //  HalUARTWrite(0, "getit", 5);
//  559                      if((SerialApp_TxBuf[0]+SerialApp_TxBuf[1]+SerialApp_TxBuf[2]+SerialApp_TxBuf[3]+SerialApp_TxBuf[4]+SerialApp_TxBuf[5]+SerialApp_TxBuf[8])==(SerialApp_TxBuf[6]*256+SerialApp_TxBuf[7]))
        MOV     DPTR,#SerialApp_TxBuf + 5
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     DPTR,#SerialApp_TxBuf + 4
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#SerialApp_TxBuf + 3
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPTR,#SerialApp_TxBuf + 2
        MOVX    A,@DPTR
        MOV     R2,A
        ADD     A,R4
        MOV     ?V0 + 2,A
        CLR     A
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_9:
        ADD     A,R0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_10:
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     DPTR,#SerialApp_TxBuf + 8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 2
        ADD     A,?V0 + 4
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_11:
        ADD     A,#-0x54
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPTR,#SerialApp_TxBuf + 6
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        CLR     A
        ADD     A,?V0 + 6
        XRL     A,?V0 + 4
        JNZ     ??SerialApp_CallBack_4
        MOV     A,?V0 + 3
        XRL     A,?V0 + 5
??SerialApp_CallBack_4:
        JNZ     ??SerialApp_CallBack_1
//  560                      {
//  561                        
//  562                      PM_25 = (SerialApp_TxBuf[4])*256+(SerialApp_TxBuf[5]);
        MOV     A,R0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#PM_25
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  563                      PM_10 = (SerialApp_TxBuf[2])*256+(SerialApp_TxBuf[3]);
        MOV     A,R2
        MOV     R3,A
        CLR     A
        ADD     A,R4
        MOV     ?V0 + 0,A
        MOV     A,R3
        LCALL   ?Subroutine4 & 0xFFFF
//  564                    
//  565                      }
//  566                    
//  567                    }
//  568                 }
//  569 #endif
//  570              }            
??CrossCallReturnLabel_7:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#PM_10
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  571 
//  572             SerialApp_TxLen = 0;
??SerialApp_CallBack_1:
        MOV     DPTR,#SerialApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  573         }
//  574     }
//  575 }
??SerialApp_CallBack_0:
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 2
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,R4
        ADD     A,?V0 + 0
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,R4
        ADD     A,?V0 + 0
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
//  576 /*********************************************************************
//  577  * @fn      SampleApp_SendPeriodicMessage
//  578  *
//  579  * @brief   Send the periodic message.
//  580  *
//  581  * @param   none
//  582  *
//  583  * @return  none
//  584  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  585 void SampleApp_SendPeriodicMessage( void )
SampleApp_SendPeriodicMessage:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function SampleApp_SendPeriodicMessage
        CODE
//  586 {
        FUNCALL SampleApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  587   if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
//  588                        SAMPLEAPP_PERIODIC_CLUSTERID,
//  589                        1,
//  590                        (uint8*)&SampleAppPeriodicCounter,
//  591                        &SampleApp_TransID,
//  592                        AF_DISCV_ROUTE,
//  593                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
        MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
        MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock16
//  594   {
//  595   }
//  596   else
//  597   {
//  598     // Error occurred in request to send.
//  599   }
//  600 }
//  601 
//  602 /*********************************************************************
//  603  * @fn      SampleApp_SendFlashMessage
//  604  *
//  605  * @brief   Send the flash message to group 1.
//  606  *
//  607  * @param   flashTime - in milliseconds
//  608  *
//  609  * @return  none
//  610  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  611 void SampleApp_SendFlashMessage( uint16 flashTime )
SampleApp_SendFlashMessage:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function SampleApp_SendFlashMessage
        CODE
//  612 {
        FUNCALL SampleApp_SendFlashMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  613   uint8 buffer[3];
//  614   buffer[0] = (uint8)(SampleAppFlashCounter++);
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        MOV     DPTR,#SampleAppFlashCounter
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  615   buffer[1] = LO_UINT16( flashTime );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  616   buffer[2] = HI_UINT16( flashTime );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  617 
//  618   if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
//  619                        SAMPLEAPP_FLASH_CLUSTERID,
//  620                        3,
//  621                        buffer,
//  622                        &SampleApp_TransID,
//  623                        AF_DISCV_ROUTE,
//  624                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_Flash_DstAddr & 0xff
        MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 13)
//  625   {
//  626   }
//  627   else
//  628   {
//  629     // Error occurred in request to send.
//  630   }
//  631 }
        MOV     A,#0x3
        CFI EndBlock cfiBlock17
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 60)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock18
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19
//  632 
//  633 /*********************************************************************
//  634  * @fn      SampleApp_Send_P2P_Message
//  635  *
//  636  * @brief   point to point.
//  637  *
//  638  * @param   none
//  639  *
//  640  * @return  none
//  641  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  642 void SampleApp_Send_P2P_Message( void )   // ×Ó½Úµã·¢ËÍÐÅÏ¢µ½Ð­µ÷Æ÷Êý¾ÝÔÚ´Ë»ã×Ü£¬·¢ËÍÖÜÆÚÓÉ¶¨Ê±Æ÷¾ö¶¨
SampleApp_Send_P2P_Message:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function SampleApp_Send_P2P_Message
        CODE
//  643 {
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 92, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 92, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 116, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 116, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Send_P2P_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 101, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 101, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 68
        MOV     A,#-0x44
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 92)
//  644  //MicroWait(200); 
//  645  
//  646   uint8 readData[9] = {0xaa,0x02,0x00,0x00,0x00,0x00,0x01,0x67,0xbb};
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {170, 2, 0, 0, 0, 0, 1, 103, 187}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {170, 2, 0, 0, 0, 0, 1, 103, 187}>` & 0xff
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  647   uint8 readCo2[9] =  {0xff,0x01,0x86,0x00,0x00,0x00,0x00,0x00,0x79};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {255, 1, 134, 0, 0, 0, 0, 0, 121}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {255, 1, 134, 0, 0, 0, 0, 0, 121}>` & 0xff
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  648   uint8 strTemp[50]={0};
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x32
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  649   //uint8 wnd[4] = {0};
//  650   float vol=0.0,fengya=-12.3; //adc²ÉÑùµçÑ¹  
//  651   float temp=0.0; //±£´æÎÂ¶È
//  652   float humidity=0.0;//±£´æÊª¶È
//  653   //uint8 start1 = 'I';
//  654  // uint8 start2 = 'D';
//  655   
//  656  
//  657 
//  658  HalUARTWrite(0,readData,9);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x9
        MOV     R5,A
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  659  // MicroWait(200);
//  660  HalUARTWrite(0,readData,9);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ?Subroutine3 & 0xFFFF
//  661  MicroWait(200);
//  662  
//  663  HalUARTWrite(1,readCo2,9);
??CrossCallReturnLabel_4:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x1
        LCALL   ?Subroutine1 & 0xFFFF
//  664  // MicroWait(200);
//  665  HalUARTWrite(1,readCo2,9);
??CrossCallReturnLabel_1:
        MOV     R1,#0x1
        LCALL   ?Subroutine3 & 0xFFFF
//  666   
//  667  MicroWait(200);
//  668   //MicroWait(200);
//  669   uint16 adc= HalAdcRead(HAL_ADC_CHANNEL_6, HAL_ADC_RESOLUTION_14);  // P0_6
??CrossCallReturnLabel_5:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0x6
        LCALL   ??HalAdcRead?relay
//  670    //×î´ó²ÉÑùÖµ8192(ÒòÎª×î¸ßÎ»ÊÇ·ûºÅÎ»)
//  671     if(adc>=8192)
//  672     {
//  673        // sprintf(&str_adc[6], "error");
//  674       //  len=11;
//  675     }
//  676     else
//  677     {
//  678        //Êä³öµçÑ¹
//  679         vol=(float)((float)(adc*3.3))/8192.0;
//  680         if(vol<0.4||vol>2.0)
//  681         {
//  682         }
//  683         else
//  684         {
//  685         
//  686         vol = 125*(vol-0.4)-100;
//  687         
//  688         }
//  689         //È¡Ð¡ÊýµãµÄ3Î»£¬·Å´ó1000±¶
//  690         adc=vol*1000;
//  691         
//  692     
//  693     }
//  694   DHT11();             //»ñÈ¡ÎÂÊª¶È
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
//  695   temp=wendu_shi*10+wendu_ge+((float)(wendu_p))/10;//¸ù¾ÝÊ®Î»ºÍ¸öÎ»¼ÆËãÎÂ¶È
        MOV     DPTR,#wendu_shi
        MOVX    A,@DPTR
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     DPTR,#wendu_ge
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        ADD     A,R2
        MOV     ?V0 + 0,A
        MOV     A,B
        ADDC    A,#0x0
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?L_TO_FLT
        MOV     DPTR,#wendu_p
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_41200000
        MOV     R0,#?V0 + 8
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_ADD
//  696   humidity=shidu_shi*10+shidu_ge+((float)(shidu_p))/10;//¸ù¾ÝÊ®Î»ºÍ¸öÎ»¼ÆËãÊª¶È  
//  697   //ÏÔÊ¾µ±Ç°ÖÕ¶Ë
//  698  // sprintf(strTemp, "ÖÕ¶Ë%d", deviceID);
//  699   //HalLcdWriteString( strTemp, HAL_LCD_LINE_3 );
//  700 
//  701   //¸ñÊ½»¯ÎÂÊª¶ÈÍ¬£¬²¢LCDÏÔÊ¾
//  702   //sprintf(strTemp, "ÎÂ¶È:%02d Êª¶È:%02d", temp, humidity);
//  703   //HalLcdWriteString( strTemp, HAL_LCD_LINE_4 );
//  704 
//  705   //´®¿ÚÊä³öÊý¾Ý
//  706   //HalUARTWrite(0,strTemp,osal_strlen(strTemp));
//  707  // HalUARTWrite(0, "\n",1);
//  708 
//  709   //¸ñÊ½»¯Êý¾Ý£¬ÓÃÓÚÎÞÏß·¢ËÍ
//  710 //  strTemp[0]=deviceID;//Ôö¼ÓÖÕ¶ËµÄIDµ½ÎÞÏßÐÅÏ¢ÉÏ
//  711 //  
//  712 //  strTemp[1] = 12;   //·çÑ¹
//  713 //  strTemp[2] = 3;   //·çÑ¹
//  714 //  
//  715 //  strTemp[2] = 12;  //pm2.5
//  716 //  strTemp[3] = 34;  //pm2.5
//  717 //  
//  718 //  strTemp[4] = 12;  //pm10
//  719 //  strTemp[5] = 34;  //pm10
//  720 //  
//  721 //  strTemp[6]=humidity;//Êª¶È
//  722 //  strTemp[7] = shidu_p;  //Êª¶È
//  723 //  
//  724 //  strTemp[8]=temp;//ÎÂ¶È
//  725 //  strTemp[9]=wendu_p;//ÎÂ¶È
//  726   sprintf(strTemp, "%d%05.1f%05.1f%05.1f%05.1f%05.1f%05d", deviceID, fengya,PM_25,PM_10,humidity,temp,CO2);
        ; Setup parameters for call to function sprintf
        MOV     DPTR,#CO2
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 94)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 98)
        MOV     DPTR,#shidu_shi
        MOVX    A,@DPTR
        MOV     B,#0xa
        MUL     AB
        MOV     R0,A
        MOV     DPTR,#shidu_ge
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        ADD     A,R2
        MOV     ?V0 + 4,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 4
        LCALL   ?L_TO_FLT
        MOV     DPTR,#shidu_p
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        CLR     A
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,A
        MOV     ?V0 + 11,A
        MOV     R0,#?V0 + 8
        LCALL   ?UL_TO_FLT
        MOV     DPTR,#__Constant_41200000
        MOV     R0,#?V0 + 12
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 8
        MOV     R1,#?V0 + 12
        LCALL   ?FLT_DIV
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 8
        LCALL   ?FLT_ADD
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_FOUR
        CFI CFA_XSP16 add(XSP16, 102)
        MOV     DPTR,#PM_10
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 106)
        MOV     DPTR,#PM_25
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 110)
        MOV     DPTR,#__Constant_c144cccd
        LCALL   ?PUSH_XSTACK8_X_FOUR
        CFI CFA_XSP16 add(XSP16, 114)
        MOV     DPTR,#deviceID
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 116)
        MOV     R4,#`?<Constant "%d%05.1f%05.1f%05.1f%...">` & 0xff
        MOV     R5,#(`?<Constant "%d%05.1f%05.1f%05.1f%...">` >> 8) & 0xff
        MOV     A,#0x2a
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x18
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 92)
//  727   if(temp>0)
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?FLT_GE
        JNC     ??SampleApp_Send_P2P_Message_0
//  728   if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
//  729                        SAMPLEAPP_P2P_CLUSTERID,
//  730                        31, //·¢ËÍ³¤¶È
//  731                        strTemp,//·¢ËÍÖ¸Õë
//  732                        &SampleApp_TransID,
//  733                        AF_DISCV_ROUTE,
//  734                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 93)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 95)
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 97)
        MOV     ?V0 + 0,#0x1f
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 99)
        MOV     ?V0 + 0,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 101)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_P2P_DstAddr & 0xff
        MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 92)
//  735   {
//  736   }
//  737   else
//  738   {
//  739     // Error occurred in request to send.
//  740   }
//  741 }
??SampleApp_Send_P2P_Message_0:
        MOV     A,#0x44
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 92)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     ?V0 + 1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 92)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 92)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function Onboard_wait
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x38
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 92)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        LCALL   ??HalUARTWrite?relay
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x9
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for deviceID>`:
        DATA8
        DB 3

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for PM_25>`:
        DATA32
        DD 42F6999AH

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for PM_10>`:
        DATA32
        DD 42F6999AH

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for CO2>`:
        DATA16
        DW 1000

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for tempLimit>`:
        DATA8
        DB 35

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for humLimit>`:
        DATA8
        DB 30

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetBuzzer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetBuzzer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_SendFlashMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_SendFlashMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Send_P2P_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Send_P2P_Message

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {170, 1, 0, 0, 0, 0, 1, 102, 187}>`:
        DB 170
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 102
        DB 187

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {170, 2, 0, 0, 0, 0, 1, 103, 187}>`:
        DB 170
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 103
        DB 187

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {255, 1, 134, 0, 0, 0, 0, 0, 121}>`:
        DB 255
        DB 1
        DB 134
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 121

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%d%05.1f%05.1f%05.1f%...">`:
        DB "%d%05.1f%05.1f%05.1f%05.1f%05.1f%05d"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41200000:
        DD 41200000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_c144cccd:
        DD 0C144CCCDH

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1H

        END
//  742 /*********************************************************************
//  743 *********************************************************************/
// 
// 1 744 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//    13 bytes in segment XDATA_I
//    13 bytes in segment XDATA_ID
//   210 bytes in segment XDATA_ROM_C
//   147 bytes in segment XDATA_Z
// 
// 1 811 bytes of CODE  memory
//   198 bytes of CONST memory (+ 12 bytes shared)
//     0 bytes of DATA  memory (+  3 bytes shared)
//   160 bytes of XDATA memory
//
//Errors: none
//Warnings: 7
