///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        16/May/2016  21:24:24 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\ /
//                          Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Compo /
//                          nents\hal\target\CC2530EB\hal_lcd.c               /
//    Command line       =  -f "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v /
//                          3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´« /
//                          ¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\P /
//                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\. /
//                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ       /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DRTR_NWK -DBLINK_LEDS) -f                     /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T /
//                          ools\CC2530DB\f8wConfig.cfg" (-DSECURE=0          /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "E:\work\zigbee\taobao\Èí¼ /
//                          þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\ /
//                          5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                     /
//                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Components\ /
//                          hal\target\CC2530EB\hal_lcd.c" -D ZIGBEEPRO -D    /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\RouterEB-P /
//                          ro\List\" -lA "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ± /
//                          ¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé /
//                          \7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2. /
//                          3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\RouterEB-Pro\List\" --diag_suppress           /
//                          Pe001,Pa010 -o "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ /
//                          ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑ /
//                          é\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2 /
//                          .3.0-1.4.0\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\RouterEB-Pro\Obj\" -e --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\" -I       /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\SOURCE\ /
//                          " -I "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ /
//                          -v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È /
//                          ´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0 /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\ZMAIN\TI2530DB\" -I                           /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MT\" -I                           /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\HAL\INCLUDE\" -I                  /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\HAL\TARGET\CC2530EB\" -I          /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\OSAL\MCU\CCSOC\" -I               /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\OSAL\INCLUDE\" -I                 /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\STACK\AF\" -I                     /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\STACK\NWK\" -I                    /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\STACK\SEC\" -I                    /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\STACK\SAPI\" -I                   /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\STACK\SYS\" -I                    /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\STACK\ZDO\" -I                    /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\ZMAC\F8W\" -I                     /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\ZMAC\" -I                         /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\SERVICES\SADDR\" -I               /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\SERVICES\SDATA\" -I               /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MAC\INCLUDE\" -I                  /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MAC\HIGH_LEVEL\" -I               /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I          /
//                          "E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6 /
//                          \Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ /
//                          ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proj /
//                          ects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. /
//                          .\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" /
//                           -Ohz                                             /
//    List file          =  E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\ /
//                          Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷ /
//                          DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\RouterEB-Pr /
//                          o\List\hal_lcd.s51                                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME hal_lcd

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??DelayMS?relay
        FUNCTION ??DelayMS?relay,0203H
        PUBLIC ??HalLcdInit?relay
        FUNCTION ??HalLcdInit?relay,0203H
        PUBLIC ??HalLcdWriteScreen?relay
        FUNCTION ??HalLcdWriteScreen?relay,0203H
        PUBLIC ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,0203H
        PUBLIC ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,0203H
        PUBLIC ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,0203H
        PUBLIC ??HalLcdWriteValue?relay
        FUNCTION ??HalLcdWriteValue?relay,0203H
        PUBLIC ??HalLcd_HW_Init?relay
        FUNCTION ??HalLcd_HW_Init?relay,0203H
        PUBLIC ??HalLcd_HW_WaitUs?relay
        FUNCTION ??HalLcd_HW_WaitUs?relay,0203H
        PUBLIC ??LCD_CLS?relay
        FUNCTION ??LCD_CLS?relay,0203H
        PUBLIC ??LCD_DLY_ms?relay
        FUNCTION ??LCD_DLY_ms?relay,0203H
        PUBLIC ??LCD_Fill?relay
        FUNCTION ??LCD_Fill?relay,0203H
        PUBLIC ??LCD_P8x16Str?relay
        FUNCTION ??LCD_P8x16Str?relay,0203H
        PUBLIC ??LCD_Set_Pos?relay
        FUNCTION ??LCD_Set_Pos?relay,0203H
        PUBLIC ??LCD_WrCmd?relay
        FUNCTION ??LCD_WrCmd?relay,0203H
        PUBLIC ??LCD_WrDat?relay
        FUNCTION ??LCD_WrDat?relay,0203H
        PUBLIC ??LcdClearLine?relay
        FUNCTION ??LcdClearLine?relay,0203H
        PUBLIC ??getChineseCode?relay
        FUNCTION ??getChineseCode?relay,0203H
        PUBLIC DelayMS
        FUNCTION DelayMS,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC F8X16
        PUBLIC HalLcdInit
        FUNCTION HalLcdInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcdWriteScreen
        FUNCTION HalLcdWriteScreen,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC HalLcdWriteString
        FUNCTION HalLcdWriteString,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 36, STACK
        PUBLIC HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC HalLcdWriteValue
        FUNCTION HalLcdWriteValue,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 43, STACK
        PUBLIC HalLcd_HW_Init
        FUNCTION HalLcd_HW_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC HalLcd_HW_WaitUs
        FUNCTION HalLcd_HW_WaitUs,080203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC LCD_CLS
        FUNCTION LCD_CLS,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_DLY_ms
        FUNCTION LCD_DLY_ms,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LCD_Fill
        FUNCTION LCD_Fill,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_P8x16Str
        FUNCTION LCD_P8x16Str,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 17, STACK
        PUBLIC LCD_Set_Pos
        FUNCTION LCD_Set_Pos,021203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC LCD_WrCmd
        FUNCTION LCD_WrCmd,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LCD_WrDat
        FUNCTION LCD_WrDat,0203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LcdClearLine
        FUNCTION LcdClearLine,021203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBLIC getChineseCode
        FUNCTION getChineseCode,0203H
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC tabel_hanzi
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
_ltoa               SYMBOL "_ltoa"
osal_strlen         SYMBOL "osal_strlen"
osal_memcpy         SYMBOL "osal_memcpy"
osal_memset         SYMBOL "osal_memset"
??_ltoa?relay       SYMBOL "?relay", _ltoa
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_strlen?relay SYMBOL "?relay", osal_strlen
DelayMS             SYMBOL "DelayMS"
??DelayMS?relay     SYMBOL "?relay", DelayMS
HalLcdInit          SYMBOL "HalLcdInit"
??HalLcdInit?relay  SYMBOL "?relay", HalLcdInit
HalLcdWriteScreen   SYMBOL "HalLcdWriteScreen"
??HalLcdWriteScreen?relay SYMBOL "?relay", HalLcdWriteScreen
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
HalLcdWriteValue    SYMBOL "HalLcdWriteValue"
??HalLcdWriteValue?relay SYMBOL "?relay", HalLcdWriteValue
HalLcd_HW_Init      SYMBOL "HalLcd_HW_Init"
??HalLcd_HW_Init?relay SYMBOL "?relay", HalLcd_HW_Init
HalLcd_HW_WaitUs    SYMBOL "HalLcd_HW_WaitUs"
??HalLcd_HW_WaitUs?relay SYMBOL "?relay", HalLcd_HW_WaitUs
LCD_CLS             SYMBOL "LCD_CLS"
??LCD_CLS?relay     SYMBOL "?relay", LCD_CLS
LCD_DLY_ms          SYMBOL "LCD_DLY_ms"
??LCD_DLY_ms?relay  SYMBOL "?relay", LCD_DLY_ms
LCD_Fill            SYMBOL "LCD_Fill"
??LCD_Fill?relay    SYMBOL "?relay", LCD_Fill
LCD_P8x16Str        SYMBOL "LCD_P8x16Str"
??LCD_P8x16Str?relay SYMBOL "?relay", LCD_P8x16Str
LCD_Set_Pos         SYMBOL "LCD_Set_Pos"
??LCD_Set_Pos?relay SYMBOL "?relay", LCD_Set_Pos
LCD_WrCmd           SYMBOL "LCD_WrCmd"
??LCD_WrCmd?relay   SYMBOL "?relay", LCD_WrCmd
LCD_WrDat           SYMBOL "LCD_WrDat"
??LCD_WrDat?relay   SYMBOL "?relay", LCD_WrDat
LcdClearLine        SYMBOL "LcdClearLine"
??LcdClearLine?relay SYMBOL "?relay", LcdClearLine
getChineseCode      SYMBOL "getChineseCode"
??getChineseCode?relay SYMBOL "?relay", getChineseCode

        EXTERN _ltoa
        FUNCTION _ltoa,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??_ltoa?relay
        FUNCTION ??_ltoa?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H

// E:\work\zigbee\taobao\Èí¼þ×ÊÁÏ\ÌÔ±¦ËùÓÃ×ÊÁÏ-v3.6\Ñ§Ï°Àý³ÌÒÔ¼°¿ª·¢»·¾³°²×°\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Components\hal\target\CC2530EB\hal_lcd.c
//    1 /****************************************************************************
//    2 * Filename: hal_lcd.c
//    3 * Description: OLED driver
//    4 ****************************************************************************/
//    5 #include "hal_types.h"
//    6 #include "hal_lcd.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//    7 #include "OSAL.h"
//    8 #include "OnBoard.h"
//    9 #include "hal_assert.h"
//   10 #include <string.h>
//   11 
//   12 #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
//   13   #include "DebugTrace.h"
//   14 #endif
//   15 
//   16 #define LCD_SCL P1_2       //SCLK  Ê±ÖÓ D0£¨SCLK£©
//   17 #define LCD_SDA P1_3       //SDA   D1£¨MOSI£© Êý¾Ý
//   18 #define LCD_RST P1_7       //_RES  hardware reset   ¸´Î» 
//   19 #define LCD_DC  P0_0       //A0  H/L ÃüÁîÊý¾ÝÑ¡Í¨¶Ë£¬H£ºÊý¾Ý£¬L:ÃüÁî
//   20 
//   21 #define XLevelL            0x00
//   22 #define XLevelH            0x10
//   23 #define XLevel             ((XLevelH&0x0F)*16+XLevelL)
//   24 #define Max_Column         128
//   25 #define Max_Row            64
//   26 #define Brightness         0xCF 
//   27 #define X_WIDTH            128
//   28 #define Y_WIDTH            64
//   29 
//   30 #define LCD_MAX_BUF        25
//   31 #define HAL_LCD_MAX_CHARS  16   // Max number of chars on a single LCD line 
//   32 
//   33 //Ó¢ÎÄ±àÂëÎª0~127£¬ËùÒÔ´óÓÚ127µÄÖÐÎÄ
//   34 #define IS_CHINESE(x)       (((unsigned char)(x))>(unsigned char)0x7f )
//   35 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   36 const unsigned char F8X16[]=	  
F8X16:
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 51
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 16
        DB 12
        DB 6
        DB 16
        DB 12
        DB 6
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 192
        DB 120
        DB 64
        DB 192
        DB 120
        DB 64
        DB 0
        DB 4
        DB 63
        DB 4
        DB 4
        DB 63
        DB 4
        DB 4
        DB 0
        DB 0
        DB 112
        DB 136
        DB 252
        DB 8
        DB 48
        DB 0
        DB 0
        DB 0
        DB 24
        DB 32
        DB 255
        DB 33
        DB 30
        DB 0
        DB 0
        DB 240
        DB 8
        DB 240
        DB 0
        DB 224
        DB 24
        DB 0
        DB 0
        DB 0
        DB 33
        DB 28
        DB 3
        DB 30
        DB 33
        DB 30
        DB 0
        DB 0
        DB 240
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 0
        DB 30
        DB 33
        DB 35
        DB 36
        DB 25
        DB 39
        DB 33
        DB 16
        DB 16
        DB 22
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 224
        DB 24
        DB 4
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 7
        DB 24
        DB 32
        DB 64
        DB 0
        DB 0
        DB 2
        DB 4
        DB 24
        DB 224
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 32
        DB 24
        DB 7
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 128
        DB 240
        DB 128
        DB 64
        DB 64
        DB 0
        DB 2
        DB 2
        DB 1
        DB 15
        DB 1
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 240
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 1
        DB 1
        DB 31
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 176
        DB 112
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 96
        DB 24
        DB 4
        DB 0
        DB 96
        DB 24
        DB 6
        DB 1
        DB 0
        DB 0
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 0
        DB 15
        DB 16
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 0
        DB 16
        DB 16
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 112
        DB 8
        DB 8
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 48
        DB 40
        DB 36
        DB 34
        DB 33
        DB 48
        DB 0
        DB 0
        DB 48
        DB 8
        DB 136
        DB 136
        DB 72
        DB 48
        DB 0
        DB 0
        DB 24
        DB 32
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 192
        DB 32
        DB 16
        DB 248
        DB 0
        DB 0
        DB 0
        DB 7
        DB 4
        DB 36
        DB 36
        DB 63
        DB 36
        DB 0
        DB 0
        DB 248
        DB 8
        DB 136
        DB 136
        DB 8
        DB 8
        DB 0
        DB 0
        DB 25
        DB 33
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 224
        DB 16
        DB 136
        DB 136
        DB 24
        DB 0
        DB 0
        DB 0
        DB 15
        DB 17
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 56
        DB 8
        DB 8
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 112
        DB 136
        DB 8
        DB 8
        DB 136
        DB 112
        DB 0
        DB 0
        DB 28
        DB 34
        DB 33
        DB 33
        DB 34
        DB 28
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 0
        DB 0
        DB 49
        DB 34
        DB 34
        DB 17
        DB 15
        DB 0
        DB 0
        DB 0
        DB 0
        DB 192
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 96
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 64
        DB 32
        DB 16
        DB 8
        DB 0
        DB 0
        DB 1
        DB 2
        DB 4
        DB 8
        DB 16
        DB 32
        DB 0
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 0
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 4
        DB 0
        DB 0
        DB 8
        DB 16
        DB 32
        DB 64
        DB 128
        DB 0
        DB 0
        DB 0
        DB 32
        DB 16
        DB 8
        DB 4
        DB 2
        DB 1
        DB 0
        DB 0
        DB 112
        DB 72
        DB 8
        DB 8
        DB 8
        DB 240
        DB 0
        DB 0
        DB 0
        DB 0
        DB 48
        DB 54
        DB 1
        DB 0
        DB 0
        DB 192
        DB 48
        DB 200
        DB 40
        DB 232
        DB 16
        DB 224
        DB 0
        DB 7
        DB 24
        DB 39
        DB 36
        DB 35
        DB 20
        DB 11
        DB 0
        DB 0
        DB 0
        DB 192
        DB 56
        DB 224
        DB 0
        DB 0
        DB 0
        DB 32
        DB 60
        DB 35
        DB 2
        DB 2
        DB 39
        DB 56
        DB 32
        DB 8
        DB 248
        DB 136
        DB 136
        DB 136
        DB 112
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 192
        DB 48
        DB 8
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 7
        DB 24
        DB 32
        DB 32
        DB 32
        DB 16
        DB 8
        DB 0
        DB 8
        DB 248
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 232
        DB 8
        DB 16
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 35
        DB 32
        DB 24
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 232
        DB 8
        DB 16
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 3
        DB 0
        DB 0
        DB 0
        DB 192
        DB 48
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 0
        DB 7
        DB 24
        DB 32
        DB 32
        DB 34
        DB 30
        DB 2
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 32
        DB 63
        DB 33
        DB 1
        DB 1
        DB 33
        DB 63
        DB 32
        DB 0
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 0
        DB 192
        DB 128
        DB 128
        DB 128
        DB 127
        DB 0
        DB 0
        DB 0
        DB 8
        DB 248
        DB 136
        DB 192
        DB 40
        DB 24
        DB 8
        DB 0
        DB 32
        DB 63
        DB 32
        DB 1
        DB 38
        DB 56
        DB 32
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 32
        DB 32
        DB 32
        DB 48
        DB 0
        DB 8
        DB 248
        DB 248
        DB 0
        DB 248
        DB 248
        DB 8
        DB 0
        DB 32
        DB 63
        DB 0
        DB 63
        DB 0
        DB 63
        DB 32
        DB 0
        DB 8
        DB 248
        DB 48
        DB 192
        DB 0
        DB 8
        DB 248
        DB 8
        DB 32
        DB 63
        DB 32
        DB 0
        DB 7
        DB 24
        DB 63
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 15
        DB 16
        DB 32
        DB 32
        DB 32
        DB 16
        DB 15
        DB 0
        DB 8
        DB 248
        DB 8
        DB 8
        DB 8
        DB 8
        DB 240
        DB 0
        DB 32
        DB 63
        DB 33
        DB 1
        DB 1
        DB 1
        DB 0
        DB 0
        DB 224
        DB 16
        DB 8
        DB 8
        DB 8
        DB 16
        DB 224
        DB 0
        DB 15
        DB 24
        DB 36
        DB 36
        DB 56
        DB 80
        DB 79
        DB 0
        DB 8
        DB 248
        DB 136
        DB 136
        DB 136
        DB 136
        DB 112
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 3
        DB 12
        DB 48
        DB 32
        DB 0
        DB 112
        DB 136
        DB 8
        DB 8
        DB 8
        DB 56
        DB 0
        DB 0
        DB 56
        DB 32
        DB 33
        DB 33
        DB 34
        DB 28
        DB 0
        DB 24
        DB 8
        DB 8
        DB 248
        DB 8
        DB 8
        DB 24
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 0
        DB 8
        DB 248
        DB 8
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 32
        DB 31
        DB 0
        DB 8
        DB 120
        DB 136
        DB 0
        DB 0
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 7
        DB 56
        DB 14
        DB 1
        DB 0
        DB 0
        DB 248
        DB 8
        DB 0
        DB 248
        DB 0
        DB 8
        DB 248
        DB 0
        DB 3
        DB 60
        DB 7
        DB 0
        DB 7
        DB 60
        DB 3
        DB 0
        DB 8
        DB 24
        DB 104
        DB 128
        DB 128
        DB 104
        DB 24
        DB 8
        DB 32
        DB 48
        DB 44
        DB 3
        DB 3
        DB 44
        DB 48
        DB 32
        DB 8
        DB 56
        DB 200
        DB 0
        DB 200
        DB 56
        DB 8
        DB 0
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 0
        DB 16
        DB 8
        DB 8
        DB 8
        DB 200
        DB 56
        DB 8
        DB 0
        DB 32
        DB 56
        DB 38
        DB 33
        DB 32
        DB 32
        DB 24
        DB 0
        DB 0
        DB 0
        DB 0
        DB 254
        DB 2
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 64
        DB 64
        DB 64
        DB 0
        DB 0
        DB 12
        DB 48
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 1
        DB 6
        DB 56
        DB 192
        DB 0
        DB 0
        DB 2
        DB 2
        DB 2
        DB 254
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 64
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 4
        DB 2
        DB 2
        DB 2
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 2
        DB 2
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 25
        DB 36
        DB 34
        DB 34
        DB 34
        DB 63
        DB 32
        DB 8
        DB 248
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 17
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 32
        DB 17
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 136
        DB 248
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 16
        DB 63
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 31
        DB 34
        DB 34
        DB 34
        DB 34
        DB 19
        DB 0
        DB 0
        DB 128
        DB 128
        DB 240
        DB 136
        DB 136
        DB 136
        DB 24
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 107
        DB 148
        DB 148
        DB 148
        DB 147
        DB 96
        DB 0
        DB 8
        DB 248
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 63
        DB 33
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 128
        DB 152
        DB 152
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 152
        DB 152
        DB 0
        DB 0
        DB 0
        DB 192
        DB 128
        DB 128
        DB 128
        DB 127
        DB 0
        DB 0
        DB 8
        DB 248
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 63
        DB 36
        DB 2
        DB 45
        DB 48
        DB 32
        DB 0
        DB 0
        DB 8
        DB 8
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 32
        DB 32
        DB 63
        DB 32
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 63
        DB 32
        DB 0
        DB 63
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 63
        DB 33
        DB 0
        DB 0
        DB 32
        DB 63
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 32
        DB 31
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 128
        DB 255
        DB 161
        DB 32
        DB 32
        DB 17
        DB 14
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 14
        DB 17
        DB 32
        DB 32
        DB 160
        DB 255
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 32
        DB 32
        DB 63
        DB 33
        DB 32
        DB 0
        DB 1
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 51
        DB 36
        DB 36
        DB 36
        DB 36
        DB 25
        DB 0
        DB 0
        DB 128
        DB 128
        DB 224
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 0
        DB 31
        DB 32
        DB 32
        DB 32
        DB 16
        DB 63
        DB 32
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 1
        DB 14
        DB 48
        DB 8
        DB 6
        DB 1
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 15
        DB 48
        DB 12
        DB 3
        DB 12
        DB 48
        DB 15
        DB 0
        DB 0
        DB 128
        DB 128
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 32
        DB 49
        DB 46
        DB 14
        DB 49
        DB 32
        DB 0
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 129
        DB 142
        DB 112
        DB 24
        DB 6
        DB 1
        DB 0
        DB 0
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 128
        DB 0
        DB 0
        DB 33
        DB 48
        DB 44
        DB 34
        DB 33
        DB 48
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 124
        DB 2
        DB 2
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 63
        DB 64
        DB 64
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 2
        DB 2
        DB 124
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 63
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 6
        DB 1
        DB 1
        DB 2
        DB 2
        DB 4
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
//   37 {
//   38   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0
//   39   0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//! 1
//   40   0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//" 2
//   41   0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//# 3
//   42   0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$ 4
//   43   0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//% 5
//   44   0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//& 6
//   45   0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//' 7
//   46   0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//( 8
//   47   0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//) 9
//   48   0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//* 10
//   49   0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+ 11
//   50   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//, 12
//   51   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//- 13
//   52   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//. 14
//   53   0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,/// 15
//   54   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//0 16
//   55   0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//1 17
//   56   0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//2 18
//   57   0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//3 19
//   58   0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//4 20
//   59   0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//5 21
//   60   0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//6 22
//   61   0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//7 23
//   62   0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//8 24
//   63   0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//9 25
//   64   0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//: 26
//   65   0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//; 27
//   66   0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//< 28
//   67   0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//= 29
//   68   0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//> 30
//   69   0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//? 31
//   70   0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@ 32
//   71   0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A 33
//   72   0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B 34
//   73   0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C 35
//   74   0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D 36
//   75   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E 37
//   76   0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F 38
//   77   0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G 39
//   78   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H 40
//   79   0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I 41
//   80   0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J 42
//   81   0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K 43
//   82   0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L 44
//   83   0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M 45
//   84   0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N 46
//   85   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O 47
//   86   0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P 48
//   87   0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q 49
//   88   0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R 50
//   89   0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S 51
//   90   0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T 52
//   91   0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U 53
//   92   0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V 54
//   93   0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W 55
//   94   0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X 56
//   95   0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y 57
//   96   0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z 58
//   97   0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[ 59
//   98   0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\ 60
//   99   0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//] 61
//  100   0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^ 62
//  101   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_ 63
//  102   0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//` 64
//  103   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a 65
//  104   0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b 66
//  105   0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c 67
//  106   0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d 68
//  107   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e 69
//  108   0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f 70
//  109   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g 71
//  110   0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h 72
//  111   0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i 73
//  112   0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j 74
//  113   0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k 75
//  114   0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l 76
//  115   0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m 77
//  116   0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n 78
//  117   0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o 79
//  118   0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p 80
//  119   0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q 81
//  120   0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r 82
//  121   0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s 83
//  122   0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t 84
//  123   0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u 85
//  124   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v 86
//  125   0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w 87
//  126   0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x 88
//  127   0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y 89
//  128   0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z 90
//  129   0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//{ 91
//  130   0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//| 92
//  131   0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//} 93
//  132   0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~ 94
//  133 };
//  134 
//  135 typedef struct _hz_16_16_
//  136 {
//  137     char* gpk;
//  138     unsigned char code[32];
//  139 }hanziku;
//  140 
//  141 //ºº×Ö×Ö±í

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  142 const hanziku tabel_hanzi[] =
tabel_hanzi:
        DATA16
        DW `?<Constant "  ">`
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\273\\266">`
        DATA8
        DB 4
        DB 36
        DB 68
        DB 132
        DB 100
        DB 156
        DB 64
        DB 48
        DB 15
        DB 200
        DB 8
        DB 8
        DB 40
        DB 24
        DB 0
        DB 0
        DB 16
        DB 8
        DB 6
        DB 1
        DB 130
        DB 76
        DB 32
        DB 24
        DB 6
        DB 1
        DB 6
        DB 24
        DB 32
        DB 64
        DB 128
        DB 0
        DATA16
        DW `?<Constant "\\323\\255">`
        DATA8
        DB 64
        DB 64
        DB 66
        DB 204
        DB 0
        DB 0
        DB 252
        DB 4
        DB 2
        DB 0
        DB 252
        DB 4
        DB 4
        DB 252
        DB 0
        DB 0
        DB 0
        DB 64
        DB 32
        DB 31
        DB 32
        DB 64
        DB 79
        DB 68
        DB 66
        DB 64
        DB 127
        DB 66
        DB 68
        DB 67
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\312\\271">`
        DATA8
        DB 128
        DB 96
        DB 248
        DB 7
        DB 4
        DB 228
        DB 36
        DB 36
        DB 36
        DB 255
        DB 36
        DB 36
        DB 36
        DB 228
        DB 4
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 128
        DB 129
        DB 69
        DB 41
        DB 17
        DB 47
        DB 65
        DB 65
        DB 129
        DB 129
        DB 128
        DB 0
        DATA16
        DW `?<Constant "\\323\\303">`
        DATA8
        DB 0
        DB 0
        DB 254
        DB 34
        DB 34
        DB 34
        DB 34
        DB 254
        DB 34
        DB 34
        DB 34
        DB 34
        DB 254
        DB 0
        DB 0
        DB 0
        DB 128
        DB 96
        DB 31
        DB 2
        DB 2
        DB 2
        DB 2
        DB 127
        DB 2
        DB 2
        DB 66
        DB 130
        DB 127
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\322\\332">`
        DATA8
        DB 0
        DB 128
        DB 96
        DB 248
        DB 7
        DB 0
        DB 4
        DB 4
        DB 132
        DB 68
        DB 36
        DB 20
        DB 12
        DB 4
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 56
        DB 70
        DB 65
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 120
        DB 0
        DATA16
        DW `?<Constant "\\321\\320">`
        DATA8
        DB 4
        DB 132
        DB 228
        DB 92
        DB 68
        DB 196
        DB 128
        DB 130
        DB 254
        DB 130
        DB 130
        DB 130
        DB 254
        DB 130
        DB 128
        DB 0
        DB 2
        DB 1
        DB 127
        DB 16
        DB 16
        DB 63
        DB 128
        DB 96
        DB 31
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\265\\347">`
        DATA8
        DB 0
        DB 0
        DB 248
        DB 136
        DB 136
        DB 136
        DB 136
        DB 255
        DB 136
        DB 136
        DB 136
        DB 136
        DB 248
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 31
        DB 8
        DB 8
        DB 8
        DB 8
        DB 127
        DB 136
        DB 136
        DB 136
        DB 136
        DB 159
        DB 128
        DB 240
        DB 0
        DATA16
        DW `?<Constant "\\327\\323">`
        DATA8
        DB 128
        DB 130
        DB 130
        DB 130
        DB 130
        DB 130
        DB 130
        DB 226
        DB 162
        DB 146
        DB 138
        DB 134
        DB 130
        DB 128
        DB 128
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 64
        DB 128
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\277\\252">`
        DATA8
        DB 128
        DB 130
        DB 130
        DB 130
        DB 254
        DB 130
        DB 130
        DB 130
        DB 130
        DB 130
        DB 254
        DB 130
        DB 130
        DB 130
        DB 128
        DB 0
        DB 0
        DB 128
        DB 64
        DB 48
        DB 15
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\267\\242">`
        DATA8
        DB 0
        DB 0
        DB 24
        DB 22
        DB 16
        DB 208
        DB 184
        DB 151
        DB 144
        DB 144
        DB 144
        DB 146
        DB 148
        DB 16
        DB 0
        DB 0
        DB 0
        DB 32
        DB 16
        DB 140
        DB 131
        DB 128
        DB 65
        DB 70
        DB 40
        DB 16
        DB 40
        DB 68
        DB 67
        DB 128
        DB 128
        DB 0
        DATA16
        DW `?<Constant "\\260\\345">`
        DATA8
        DB 16
        DB 16
        DB 208
        DB 255
        DB 144
        DB 16
        DB 0
        DB 252
        DB 36
        DB 228
        DB 36
        DB 34
        DB 35
        DB 226
        DB 0
        DB 0
        DB 4
        DB 3
        DB 0
        DB 255
        DB 0
        DB 131
        DB 96
        DB 31
        DB 128
        DB 65
        DB 38
        DB 24
        DB 38
        DB 65
        DB 128
        DB 0
        DATA16
        DW `?<Constant "\\273\\260">`
        DATA8
        DB 64
        DB 64
        DB 66
        DB 204
        DB 0
        DB 0
        DB 32
        DB 36
        DB 36
        DB 36
        DB 254
        DB 34
        DB 35
        DB 34
        DB 32
        DB 0
        DB 0
        DB 0
        DB 0
        DB 127
        DB 32
        DB 16
        DB 0
        DB 254
        DB 66
        DB 66
        DB 67
        DB 66
        DB 66
        DB 254
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\304\\343">`
        DATA8
        DB 0
        DB 128
        DB 96
        DB 248
        DB 7
        DB 64
        DB 32
        DB 24
        DB 15
        DB 8
        DB 200
        DB 8
        DB 8
        DB 40
        DB 24
        DB 0
        DB 1
        DB 0
        DB 0
        DB 255
        DB 0
        DB 16
        DB 12
        DB 3
        DB 64
        DB 128
        DB 127
        DB 0
        DB 1
        DB 6
        DB 24
        DB 0
        DATA16
        DW `?<Constant "\\272\\303">`
        DATA8
        DB 16
        DB 16
        DB 240
        DB 31
        DB 16
        DB 240
        DB 0
        DB 128
        DB 130
        DB 130
        DB 226
        DB 146
        DB 138
        DB 134
        DB 128
        DB 0
        DB 64
        DB 34
        DB 21
        DB 8
        DB 22
        DB 97
        DB 0
        DB 0
        DB 64
        DB 128
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\316\\302">`
        DATA8
        DB 16
        DB 33
        DB 134
        DB 112
        DB 0
        DB 126
        DB 74
        DB 74
        DB 74
        DB 74
        DB 74
        DB 126
        DB 0
        DB 0
        DB 0
        DB 0
        DB 2
        DB 254
        DB 1
        DB 64
        DB 127
        DB 65
        DB 65
        DB 127
        DB 65
        DB 65
        DB 127
        DB 65
        DB 65
        DB 127
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\266\\310">`
        DATA8
        DB 0
        DB 0
        DB 252
        DB 4
        DB 36
        DB 36
        DB 252
        DB 165
        DB 166
        DB 164
        DB 252
        DB 36
        DB 36
        DB 36
        DB 4
        DB 0
        DB 128
        DB 96
        DB 31
        DB 128
        DB 128
        DB 66
        DB 70
        DB 42
        DB 18
        DB 18
        DB 42
        DB 38
        DB 66
        DB 192
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\243\\272">`
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 54
        DB 54
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\312\\252">`
        DATA8
        DB 16
        DB 96
        DB 2
        DB 204
        DB 0
        DB 0
        DB 62
        DB 42
        DB 170
        DB 42
        DB 170
        DB 42
        DB 62
        DB 0
        DB 0
        DB 0
        DB 8
        DB 8
        DB 254
        DB 1
        DB 64
        DB 66
        DB 76
        DB 64
        DB 127
        DB 64
        DB 127
        DB 72
        DB 68
        DB 66
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\310\\313">`
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 192
        DB 63
        DB 192
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 128
        DB 64
        DB 32
        DB 16
        DB 12
        DB 3
        DB 0
        DB 0
        DB 0
        DB 3
        DB 12
        DB 16
        DB 32
        DB 64
        DB 128
        DB 0
        DATA16
        DW `?<Constant "\\314\\345">`
        DATA8
        DB 0
        DB 128
        DB 96
        DB 248
        DB 7
        DB 16
        DB 16
        DB 16
        DB 208
        DB 255
        DB 208
        DB 16
        DB 16
        DB 16
        DB 0
        DB 0
        DB 1
        DB 0
        DB 0
        DB 255
        DB 16
        DB 8
        DB 4
        DB 11
        DB 8
        DB 255
        DB 8
        DB 11
        DB 4
        DB 8
        DB 16
        DB 0
        DATA16
        DW `?<Constant "\\306\\370">`
        DATA8
        DB 32
        DB 16
        DB 76
        DB 71
        DB 84
        DB 84
        DB 84
        DB 84
        DB 84
        DB 84
        DB 84
        DB 212
        DB 4
        DB 4
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 15
        DB 48
        DB 64
        DB 240
        DB 0
        DATA16
        DW `?<Constant "\\323\\320">`
        DATA8
        DB 4
        DB 4
        DB 4
        DB 132
        DB 228
        DB 60
        DB 39
        DB 36
        DB 36
        DB 36
        DB 36
        DB 228
        DB 4
        DB 4
        DB 4
        DB 0
        DB 4
        DB 2
        DB 1
        DB 0
        DB 255
        DB 9
        DB 9
        DB 9
        DB 9
        DB 73
        DB 137
        DB 127
        DB 0
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\316\\336">`
        DATA8
        DB 0
        DB 64
        DB 66
        DB 66
        DB 66
        DB 194
        DB 126
        DB 66
        DB 194
        DB 66
        DB 66
        DB 66
        DB 64
        DB 64
        DB 0
        DB 0
        DB 128
        DB 64
        DB 32
        DB 16
        DB 12
        DB 3
        DB 0
        DB 0
        DB 63
        DB 64
        DB 64
        DB 64
        DB 64
        DB 112
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\325\\375">`
        DATA8
        DB 0
        DB 2
        DB 2
        DB 194
        DB 2
        DB 2
        DB 2
        DB 254
        DB 130
        DB 130
        DB 130
        DB 130
        DB 130
        DB 2
        DB 0
        DB 0
        DB 64
        DB 64
        DB 64
        DB 127
        DB 64
        DB 64
        DB 64
        DB 127
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\324\\332">`
        DATA8
        DB 8
        DB 8
        DB 136
        DB 200
        DB 56
        DB 12
        DB 11
        DB 8
        DB 8
        DB 232
        DB 8
        DB 8
        DB 8
        DB 8
        DB 8
        DB 0
        DB 2
        DB 1
        DB 0
        DB 255
        DB 64
        DB 65
        DB 65
        DB 65
        DB 65
        DB 127
        DB 65
        DB 65
        DB 65
        DB 65
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\311\\317">`
        DATA8
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 0
        DB 255
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 0
        DB 0
        DB 0
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 127
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 64
        DB 0
        DATA16
        DW `?<Constant "\\264\\253">`
        DATA8
        DB 0
        DB 128
        DB 96
        DB 248
        DB 7
        DB 64
        DB 72
        DB 72
        DB 232
        DB 95
        DB 72
        DB 72
        DB 72
        DB 64
        DB 64
        DB 0
        DB 1
        DB 0
        DB 0
        DB 255
        DB 0
        DB 0
        DB 2
        DB 11
        DB 18
        DB 34
        DB 210
        DB 10
        DB 6
        DB 0
        DB 0
        DB 0
        DATA16
        DW `?<Constant "\\271\\342">`
        DATA8
        DB 64
        DB 64
        DB 66
        DB 68
        DB 88
        DB 192
        DB 64
        DB 127
        DB 64
        DB 192
        DB 80
        DB 72
        DB 70
        DB 64
        DB 64
        DB 0
        DB 128
        DB 128
        DB 64
        DB 32
        DB 24
        DB 7
        DB 0
        DB 0
        DB 0
        DB 63
        DB 64
        DB 64
        DB 64
        DB 64
        DB 120
        DB 0
        DATA16
        DW `?<Constant "\\325\\325">`
        DATA8
        DB 0
        DB 254
        DB 66
        DB 66
        DB 66
        DB 254
        DB 0
        DB 66
        DB 162
        DB 158
        DB 130
        DB 162
        DB 194
        DB 190
        DB 0
        DB 0
        DB 128
        DB 111
        DB 8
        DB 8
        DB 40
        DB 207
        DB 0
        DB 0
        DB 47
        DB 200
        DB 8
        DB 8
        DB 40
        DB 207
        DB 0
        DB 0
//  143 {
//  144     //ÕÒ²»µ½¾ÍÏÔÊ¾Õâ¸ö£¬Á½¸ö¿Õ¸ñ
//  145     {{"  "},
//  146     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  147     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
//  148 
//  149     /*--  ÎÄ×Ö:  »¶  --*/
//  150     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  151     {{"»¶"},
//  152     {0x04,0x24,0x44,0x84,0x64,0x9C,0x40,0x30,0x0F,0xC8,0x08,0x08,0x28,0x18,0x00,0x00,
//  153     0x10,0x08,0x06,0x01,0x82,0x4C,0x20,0x18,0x06,0x01,0x06,0x18,0x20,0x40,0x80,0x00}},
//  154     /*--  ÎÄ×Ö:  Ó­  --*/
//  155     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  156     {{"Ó­"},
//  157     {0x40,0x40,0x42,0xCC,0x00,0x00,0xFC,0x04,0x02,0x00,0xFC,0x04,0x04,0xFC,0x00,0x00,
//  158     0x00,0x40,0x20,0x1F,0x20,0x40,0x4F,0x44,0x42,0x40,0x7F,0x42,0x44,0x43,0x40,0x00}},
//  159 
//  160     /*--  ÎÄ×Ö:  Ê¹  --*/
//  161     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  162     {{"Ê¹"},
//  163     {0x80,0x60,0xF8,0x07,0x04,0xE4,0x24,0x24,0x24,0xFF,0x24,0x24,0x24,0xE4,0x04,0x00,
//  164     0x00,0x00,0xFF,0x00,0x80,0x81,0x45,0x29,0x11,0x2F,0x41,0x41,0x81,0x81,0x80,0x00}},
//  165 
//  166     /*--  ÎÄ×Ö:  ÓÃ  --*/
//  167     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  168     {{"ÓÃ"},
//  169     {0x00,0x00,0xFE,0x22,0x22,0x22,0x22,0xFE,0x22,0x22,0x22,0x22,0xFE,0x00,0x00,0x00,
//  170     0x80,0x60,0x1F,0x02,0x02,0x02,0x02,0x7F,0x02,0x02,0x42,0x82,0x7F,0x00,0x00,0x00}},
//  171 
//  172     /*--  ÎÄ×Ö:  ÒÚ  --*/
//  173     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  174     {{"ÒÚ"},
//  175     {0x00,0x80,0x60,0xF8,0x07,0x00,0x04,0x04,0x84,0x44,0x24,0x14,0x0C,0x04,0x00,0x00,
//  176     0x01,0x00,0x00,0xFF,0x00,0x00,0x38,0x46,0x41,0x40,0x40,0x40,0x40,0x40,0x78,0x00,}},
//  177 
//  178     /*--  ÎÄ×Ö:  ÑÐ  --*/
//  179     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  180     {{"ÑÐ"},
//  181     {0x04,0x84,0xE4,0x5C,0x44,0xC4,0x80,0x82,0xFE,0x82,0x82,0x82,0xFE,0x82,0x80,0x00,
//  182     0x02,0x01,0x7F,0x10,0x10,0x3F,0x80,0x60,0x1F,0x00,0x00,0x00,0xFF,0x00,0x00,0x00}},
//  183 
//  184     /*--  ÎÄ×Ö:  µç  --*/
//  185     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  186     {{"µç"},
//  187     {0x00,0x00,0xF8,0x88,0x88,0x88,0x88,0xFF,0x88,0x88,0x88,0x88,0xF8,0x00,0x00,0x00,
//  188     0x00,0x00,0x1F,0x08,0x08,0x08,0x08,0x7F,0x88,0x88,0x88,0x88,0x9F,0x80,0xF0,0x00}},
//  189 
//  190     /*--  ÎÄ×Ö:  ×Ó  --*/
//  191     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  192     {{"×Ó"},
//  193     {0x80,0x82,0x82,0x82,0x82,0x82,0x82,0xE2,0xA2,0x92,0x8A,0x86,0x82,0x80,0x80,0x00,
//  194     0x00,0x00,0x00,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
//  195 
//  196     /*--  ÎÄ×Ö:  ¿ª  --*/
//  197     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  198     {{"¿ª"},
//  199     {0x80,0x82,0x82,0x82,0xFE,0x82,0x82,0x82,0x82,0x82,0xFE,0x82,0x82,0x82,0x80,0x00,
//  200     0x00,0x80,0x40,0x30,0x0F,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00}},
//  201 
//  202     /*--  ÎÄ×Ö:  ·¢  --*/
//  203     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  204     {{"·¢"},
//  205     {0x00,0x00,0x18,0x16,0x10,0xD0,0xB8,0x97,0x90,0x90,0x90,0x92,0x94,0x10,0x00,0x00,
//  206     0x00,0x20,0x10,0x8C,0x83,0x80,0x41,0x46,0x28,0x10,0x28,0x44,0x43,0x80,0x80,0x00}},
//  207 
//  208     /*--  ÎÄ×Ö:  °å  --*/
//  209     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  210     {{"°å"},
//  211     {0x10,0x10,0xD0,0xFF,0x90,0x10,0x00,0xFC,0x24,0xE4,0x24,0x22,0x23,0xE2,0x00,0x00,
//  212     0x04,0x03,0x00,0xFF,0x00,0x83,0x60,0x1F,0x80,0x41,0x26,0x18,0x26,0x41,0x80,0x00}},
//  213 
//  214 
//  215     /*--  ÎÄ×Ö:  »°  --*/
//  216     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  217     {{"»°"},
//  218     {0x40,0x40,0x42,0xCC,0x00,0x00,0x20,0x24,0x24,0x24,0xFE,0x22,0x23,0x22,0x20,0x00,
//  219     0x00,0x00,0x00,0x7F,0x20,0x10,0x00,0xFE,0x42,0x42,0x43,0x42,0x42,0xFE,0x00,0x00}},
//  220 
//  221 /*--  ÎÄ×Ö:  Äã  --*/
//  222 /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  223     {{"Äã"},
//  224     {0x00,0x80,0x60,0xF8,0x07,0x40,0x20,0x18,0x0F,0x08,0xC8,0x08,0x08,0x28,0x18,0x00,
//  225     0x01,0x00,0x00,0xFF,0x00,0x10,0x0C,0x03,0x40,0x80,0x7F,0x00,0x01,0x06,0x18,0x00}},
//  226 
//  227 /*--  ÎÄ×Ö:  ºÃ  --*/
//  228 /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  229     {{"ºÃ"},
//  230     {0x10,0x10,0xF0,0x1F,0x10,0xF0,0x00,0x80,0x82,0x82,0xE2,0x92,0x8A,0x86,0x80,0x00,
//  231     0x40,0x22,0x15,0x08,0x16,0x61,0x00,0x00,0x40,0x80,0x7F,0x00,0x00,0x00,0x00,0x00}},
//  232 
//  233 /*--  ÎÄ×Ö:  ÎÂ  --*/
//  234 /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  235     {{"ÎÂ"},
//  236     {0x10,0x21,0x86,0x70,0x00,0x7E,0x4A,0x4A,0x4A,0x4A,0x4A,0x7E,0x00,0x00,0x00,0x00,
//  237     0x02,0xFE,0x01,0x40,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x41,0x41,0x7F,0x40,0x00}},
//  238 
//  239 /*--  ÎÄ×Ö:  ¶È  --*/
//  240 /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  241     {{"¶È"},
//  242     {0x00,0x00,0xFC,0x04,0x24,0x24,0xFC,0xA5,0xA6,0xA4,0xFC,0x24,0x24,0x24,0x04,0x00,
//  243     0x80,0x60,0x1F,0x80,0x80,0x42,0x46,0x2A,0x12,0x12,0x2A,0x26,0x42,0xC0,0x40,0x00}},
//  244 
//  245 /*--  ÎÄ×Ö:  £º  --*/
//  246 /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  247     {{"£º"},
//  248     {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  249     0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}},
//  250 
//  251 /*--  ÎÄ×Ö:  Êª  --*/
//  252 /*--  ËÎÌå12;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  253     {{"Êª"},
//  254     {0x10,0x60,0x02,0xCC,0x00,0x00,0x3E,0x2A,0xAA,0x2A,0xAA,0x2A,0x3E,0x00,0x00,0x00,
//  255     0x08,0x08,0xFE,0x01,0x40,0x42,0x4C,0x40,0x7F,0x40,0x7F,0x48,0x44,0x42,0x40,0x00}},
//  256 
//  257 
//  258     /*--  ÎÄ×Ö:  ÈË  --*/
//  259     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  260     {{"ÈË"},
//  261     {0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x3F,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
//  262     0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x00,0x00,0x03,0x0C,0x10,0x20,0x40,0x80,0x00}},
//  263 
//  264     /*--  ÎÄ×Ö:  Ìå  --*/
//  265     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  266     {{"Ìå"},
//  267     {0x00,0x80,0x60,0xF8,0x07,0x10,0x10,0x10,0xD0,0xFF,0xD0,0x10,0x10,0x10,0x00,0x00,
//  268     0x01,0x00,0x00,0xFF,0x10,0x08,0x04,0x0B,0x08,0xFF,0x08,0x0B,0x04,0x08,0x10, 0x00}},
//  269 
//  270     /*--  ÎÄ×Ö:  Æø  --*/
//  271     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  272     {{"Æø"},
//  273     {0x20,0x10,0x4C,0x47,0x54,0x54,0x54,0x54,0x54,0x54,0x54,0xD4,0x04,0x04,0x00,0x00,
//  274     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0x30,0x40,0xF0,0x00}},
//  275 
//  276     /*--  ÎÄ×Ö:  ÓÐ  --*/
//  277     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  278     {{"ÓÐ"},
//  279     {0x04,0x04,0x04,0x84,0xE4,0x3C,0x27,0x24,0x24,0x24,0x24,0xE4,0x04,0x04,0x04,0x00,
//  280     0x04,0x02,0x01,0x00,0xFF,0x09,0x09,0x09,0x09,0x49,0x89,0x7F,0x00,0x00,0x00,0x00}},
//  281 
//  282     /*--  ÎÄ×Ö:  ÎÞ  --*/
//  283     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  284     {{"ÎÞ"},
//  285     {0x00,0x40,0x42,0x42,0x42,0xC2,0x7E,0x42,0xC2,0x42,0x42,0x42,0x40,0x40,0x00,0x00,
//  286     0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x70,0x00,0x00}},
//  287     
//  288     /*--  ÎÄ×Ö:  Õý  --*/
//  289     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  290     {{"Õý"},
//  291     {0x00,0x02,0x02,0xC2,0x02,0x02,0x02,0xFE,0x82,0x82,0x82,0x82,0x82,0x02,0x00,0x00,
//  292     0x40,0x40,0x40,0x7F,0x40,0x40,0x40,0x7F,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00}},
//  293 
//  294     /*--  ÎÄ×Ö:  ÔÚ  --*/
//  295     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  296     {{"ÔÚ"},
//  297     {0x08,0x08,0x88,0xC8,0x38,0x0C,0x0B,0x08,0x08,0xE8,0x08,0x08,0x08,0x08,0x08,0x00,
//  298     0x02,0x01,0x00,0xFF,0x40,0x41,0x41,0x41,0x41,0x7F,0x41,0x41,0x41,0x41,0x40,0x00}},
//  299 
//  300     /*--  ÎÄ×Ö:  ÉÏ  --*/
//  301     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  302     {{"ÉÏ"},
//  303     {0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00,
//  304     0x40,0x40,0x40,0x40,0x40,0x40,0x7F,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00}},
//  305 
//  306     /*--  ÎÄ×Ö:  ´«  --*/
//  307     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  308     {{"´«"},
//  309     {0x00,0x80,0x60,0xF8,0x07,0x40,0x48,0x48,0xE8,0x5F,0x48,0x48,0x48,0x40,0x40,0x00,
//  310     0x01,0x00,0x00,0xFF,0x00,0x00,0x02,0x0B,0x12,0x22,0xD2,0x0A,0x06,0x00,0x00,0x00}},
//  311 
//  312     /*--  ÎÄ×Ö:  ¹â  --*/
//  313     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  314     {{"¹â"},
//  315     {0x40,0x40,0x42,0x44,0x58,0xC0,0x40,0x7F,0x40,0xC0,0x50,0x48,0x46,0x40,0x40,0x00,
//  316     0x80,0x80,0x40,0x20,0x18,0x07,0x00,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,0x78,0x00}},
//  317 
//  318     /*--  ÎÄ×Ö:  ÕÕ  --*/
//  319     /*--  ¿¬Ìå_GB231212;  ´Ë×ÖÌåÏÂ¶ÔÓ¦µÄµãÕóÎª£º¿íx¸ß=16x16   --*/
//  320     {{"ÕÕ"},
//  321     {0x00,0xFE,0x42,0x42,0x42,0xFE,0x00,0x42,0xA2,0x9E,0x82,0xA2,0xC2,0xBE,0x00,0x00,
//  322     0x80,0x6F,0x08,0x08,0x28,0xCF,0x00,0x00,0x2F,0xC8,0x08,0x08,0x28,0xCF,0x00,0x00}},
//  323 
//  324 
//  325 };
//  326 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  327 unsigned char* getChineseCode(char* chinese)
getChineseCode:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function getChineseCode
        CODE
//  328 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
//  329     int i;
//  330     int tableLen=sizeof(tabel_hanzi)/sizeof(hanziku);
//  331 
//  332     if(chinese==0);
//  333 
//  334     for(i=0; i<tableLen; i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
//  335     {
//  336         if(tabel_hanzi[i].gpk[0]==chinese[0] && tabel_hanzi[i].gpk[1]==chinese[1])
??getChineseCode_0:
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     A,R2
        MOV     B,#0x22
        MUL     AB
        MOV     R2,A
        MOV     R6,B
        MOV     B,#0x22
        MOV     A,R3
        MUL     AB
        ADD     A,R6
        MOV     R3,A
        MOV     A,#tabel_hanzi & 0xff
        ADD     A,R2
        MOV     R2,A
        MOV     A,#(tabel_hanzi >> 8) & 0xff
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??getChineseCode_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??getChineseCode_1
//  337         {
//  338             return (unsigned char*)tabel_hanzi[i].code;
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        SJMP    ??getChineseCode_2
//  339         }
//  340     }
??getChineseCode_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1e
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??getChineseCode_0
//  341 
//  342     return (unsigned char*)tabel_hanzi[0].code;
        MOV     R2,#(tabel_hanzi + 2) & 0xff
        MOV     R3,#((tabel_hanzi + 2) >> 8) & 0xff
??getChineseCode_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  343 }
//  344 
//  345 
//  346 #if (HAL_LCD == TRUE)
//  347 void HalLcd_HW_Init(void);
//  348 void HalLcd_HW_WaitUs(uint16 i);
//  349 void HalLcd_HW_Clear(void);
//  350 void HalLcd_HW_Control(uint8 cmd);
//  351 void HalLcd_HW_Write(uint8 data);
//  352 void HalLcd_HW_SetContrast(uint8 value);
//  353 void HalLcd_HW_WriteChar(uint8 line, uint8 col, char text);
//  354 void HalLcd_HW_WriteLine(uint8 line, const char *pText);
//  355 
//  356 void DelayMS(unsigned int msec);
//  357 void LCD_DLY_ms(unsigned int ms);
//  358 void LCD_WrDat(unsigned char dat);
//  359 void LCD_WrCmd(unsigned char cmd);
//  360 void LCD_Set_Pos(unsigned char x, unsigned char y);
//  361 void LCD_Fill(unsigned char bmp_dat) ;
//  362 void LCD_CLS(void);
//  363 void LcdClearLine(unsigned char y, unsigned char count);
//  364 
//  365 void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[]);
//  366 void HalLcdDisplayPercentBar( char *title, uint8 value );
//  367 void LCD_P16x16Ch(unsigned char x, unsigned char y, unsigned char N);
//  368 #endif //LCD
//  369 
//  370 
//  371 /**************************************************************************************************
//  372  * @fn      HalLcdInit
//  373  *
//  374  * @brief   Initilize LCD Service
//  375  *
//  376  * @param   init - pointer to void that contains the initialized value
//  377  *
//  378  * @return  None
//  379  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  380 void HalLcdInit(void)
HalLcdInit:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function HalLcdInit
        CODE
//  381 {
        FUNCALL HalLcdInit, HalLcd_HW_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  382 #if (HAL_LCD == TRUE)
//  383   HalLcd_HW_Init();
        ; Setup parameters for call to function HalLcd_HW_Init
        LCALL   ??HalLcd_HW_Init?relay
        CFI EndBlock cfiBlock1
//  384 #endif
//  385 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
//  386 
//  387 /**************************************************************************************************
//  388  * @fn      HalLcdWriteValue
//  389  *
//  390  * @brief   Write a value to the LCD
//  391  *
//  392  * @param   value  - value that will be displayed
//  393  *          radix  - 8, 10, 16
//  394  *          option - display options
//  395  *
//  396  * @return  None
//  397  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  398 void HalLcdWriteValue ( uint32 value, const uint8 radix, uint8 option)
HalLcdWriteValue:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function HalLcdWriteValue
        CODE
//  399 {
        FUNCALL HalLcdWriteValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x29
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
//  400 #if (HAL_LCD == TRUE)
//  401   uint8 buf[LCD_MAX_BUF];
//  402 
//  403   _ltoa( value, &buf[0], radix );
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 43)
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_25:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  404   HalLcdWriteString( (char*)buf, option );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     A,R6
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  405 #endif
//  406 }
        MOV     A,#0x19
        CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock4
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  407 
//  408 /**************************************************************************************************
//  409  * @fn      HalLcdWriteScreen
//  410  *
//  411  * @brief   Write a value to the LCD
//  412  *
//  413  * @param   line1  - string that will be displayed on line 1
//  414  *          line2  - string that will be displayed on line 2
//  415  *
//  416  * @return  None
//  417  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  418 void HalLcdWriteScreen( char *line1, char *line2 )
HalLcdWriteScreen:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function HalLcdWriteScreen
        CODE
//  419 {
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteScreen, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  420 #if (HAL_LCD == TRUE)
//  421   HalLcdWriteString( line1, 1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        LCALL   ??HalLcdWriteString?relay
//  422   HalLcdWriteString( line2, 2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??HalLcdWriteString?relay
//  423 #endif
//  424 }
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock6
//  425 
//  426 /**************************************************************************************************
//  427  * @fn      HalLcdWriteStringValue
//  428  *
//  429  * @brief   Write a string followed by a value to the LCD
//  430  *
//  431  * @param   title  - Title that will be displayed before the value
//  432  *          value  - value
//  433  *          format - redix
//  434  *          line   - line number
//  435  *
//  436  * @return  None
//  437  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  438 void HalLcdWriteStringValue( char *title, uint16 value, uint8 format, uint8 line )
HalLcdWriteStringValue:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function HalLcdWriteStringValue
        CODE
//  439 {
        FUNCALL HalLcdWriteStringValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 43, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 43, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 0,R1
        MOV     A,#0x2b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  440 #if (HAL_LCD == TRUE)
//  441   uint8 tmpLen;
//  442   uint8 buf[LCD_MAX_BUF];
//  443   uint32 err;
//  444 
//  445   tmpLen = (uint8)osal_strlen( (char*)title );
        ; Setup parameters for call to function osal_strlen
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 8,A
//  446   osal_memcpy( buf, title, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     ?V0 + 4,R2
        MOV     R4,?V0 + 4
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
//  447   //buf[tmpLen] = ' ';
//  448   err = (uint32)(value);
//  449   _ltoa( err, &buf[tmpLen], format );
        ; Setup parameters for call to function _ltoa
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     ?V0 + 4,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 45)
        MOV     R1,?V0 + 0
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_22:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 43)
//  450   HalLcdWriteString( (char*)buf, line );		
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,?V0 + 1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  451 #endif
//  452 }
        MOV     A,#0x19
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
//  453 
//  454 /**************************************************************************************************
//  455  * @fn      HalLcdWriteStringValue
//  456  *
//  457  * @brief   Write a string followed by a value to the LCD
//  458  *
//  459  * @param   title   - Title that will be displayed before the value
//  460  *          value1  - value #1
//  461  *          format1 - redix of value #1
//  462  *          value2  - value #2
//  463  *          format2 - redix of value #2
//  464  *          line    - line number
//  465  *
//  466  * @return  None
//  467  **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  468 void HalLcdWriteStringValueValue( char *title, uint16 value1, uint8 format1,
HalLcdWriteStringValueValue:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function HalLcdWriteStringValueValue
        CODE
//  469                                   uint16 value2, uint8 format2, uint8 line )
//  470 {
        FUNCALL HalLcdWriteStringValueValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, _ltoa
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteStringValueValue, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 25
        MOV     A,#-0x19
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     ?V0 + 5,R1
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,#0x2f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
//  471 
//  472 #if (HAL_LCD == TRUE)
//  473 
//  474   uint8 tmpLen;
//  475   uint8 buf[LCD_MAX_BUF];
//  476   uint32 err;
//  477 
//  478   tmpLen = (uint8)osal_strlen( (char*)title );
        ; Setup parameters for call to function osal_strlen
        LCALL   ?Subroutine8 & 0xFFFF
//  479   if ( tmpLen )
??CrossCallReturnLabel_9:
        JZ      ??HalLcdWriteStringValueValue_0
//  480   {
//  481     osal_memcpy( buf, title, tmpLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     ?V0 + 8,R2
        MOV     R4,?V0 + 8
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  482     //buf[tmpLen++] = ' ';
//  483   }
//  484 
//  485   err = (uint32)(value1);
//  486   _ltoa( err, &buf[tmpLen], format1 );
??HalLcdWriteStringValueValue_0:
        ; Setup parameters for call to function _ltoa
        MOV     ?V0 + 8,?V0 + 6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 8
        MOV     ?V0 + 8,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,?V0 + 5
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_23:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  487   tmpLen = (uint8)osal_strlen( (char*)buf );
        ; Setup parameters for call to function osal_strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine8 & 0xFFFF
//  488 
//  489   buf[tmpLen++] = ',';
??CrossCallReturnLabel_10:
        MOV     ?V0 + 2,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,#0x2c
        MOVX    @DPTR,A
        INC     ?V0 + 6
//  490   buf[tmpLen++] = ' ';
        MOV     ?V0 + 2,?V0 + 6
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     A,#0x20
        MOVX    @DPTR,A
//  491   err = (uint32)(value2);
//  492   _ltoa( err, &buf[tmpLen], format2 );
        ; Setup parameters for call to function _ltoa
        MOV     A,#0x1
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     ?V0 + 2,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,?V0 + 4
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_24:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  493 
//  494   HalLcdWriteString( (char *)buf, line );		
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,?V0 + 7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  495 
//  496 #endif
//  497 }
        MOV     A,#0x19
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond10) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond10) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_24
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        CLR     A
        MOV     R4,A
        MOV     R5,A
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 43)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 45)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 46)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ??_ltoa?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23
//  498 
//  499 #if (HAL_LCD == TRUE)

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  500 void DelayMS(unsigned int msec)
DelayMS:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI Function DelayMS
        CODE
//  501 { 
        ; Saved register size: 0
        ; Auto size: 0
//  502     unsigned int i,j;
//  503     
//  504     for (i=0; i<msec; i++)
        MOV     R0,#0x0
        MOV     R1,#0x0
        SJMP    ??DelayMS_0
//  505         for (j=0; j<530; j++);
??DelayMS_1:
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
??DelayMS_0:
        CLR     C
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,R3
        JC      ??DelayMS_1
//  506 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock24
//  507 
//  508 /*********************LCD ÑÓÊ±1ms************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  509 void LCD_DLY_ms(unsigned int ms)
LCD_DLY_ms:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI Function LCD_DLY_ms
        CODE
//  510 {                         
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??LCD_DLY_ms_0
//  511     unsigned int a;
//  512     while(ms)
//  513     {
//  514         a=1800;
??LCD_DLY_ms_1:
        MOV     R0,#0x8
        MOV     R1,#0x7
//  515         while(a--);
??LCD_DLY_ms_2:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ADD     A,#-0x1
        DEC     R0
        MOV     A,R5
        ADDC    A,#-0x1
        MOV     R1,A
        MOV     A,R4
        ORL     A,R5
        JNZ     ??LCD_DLY_ms_2
//  516         ms--;
        MOV     A,R2
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     R3,A
//  517     }
??LCD_DLY_ms_0:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??LCD_DLY_ms_1
//  518     return;
        LJMP    ?BRET
        CFI EndBlock cfiBlock25
//  519 }
//  520 
//  521 /*********************LCDÐ´Êý¾Ý************************************/ 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  522 void LCD_WrDat(unsigned char dat)     
LCD_WrDat:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function LCD_WrDat
        CODE
//  523 {
        ; Saved register size: 0
        ; Auto size: 0
//  524     unsigned char i=8, temp=0;
//  525     LCD_DC=1;  
        SETB    0x80.0
//  526     for(i=0;i<8;i++) //·¢ËÍÒ»¸ö°ËÎ»Êý¾Ý 
        MOV     R0,#0x8
//  527     {
//  528         LCD_SCL=0;  
??LCD_WrDat_0:
        CLR     0x90.2
//  529         
//  530         temp = dat&0x80;
//  531         if (temp == 0)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JC      ??LCD_WrDat_1
//  532         {
//  533             LCD_SDA = 0;
        CLR     0x90.3
        SJMP    ??LCD_WrDat_2
//  534         }
//  535         else
//  536         {
//  537             LCD_SDA = 1;
??LCD_WrDat_1:
        SETB    0x90.3
//  538         }
//  539         LCD_SCL=1;             
??LCD_WrDat_2:
        SETB    0x90.2
//  540         dat<<=1;    
        CLR     C
        RLC     A
        MOV     R1,A
//  541     }
        DEC     R0
        MOV     A,R0
        JNZ     ??LCD_WrDat_0
//  542 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock26
        REQUIRE _A_P0
        REQUIRE _A_P1
//  543 
//  544 /*********************LCDÐ´ÃüÁî************************************/                                        

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  545 void LCD_WrCmd(unsigned char cmd)
LCD_WrCmd:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function LCD_WrCmd
        CODE
//  546 {
        ; Saved register size: 0
        ; Auto size: 0
//  547     unsigned char i=8, temp=0;
//  548     LCD_DC=0;
        CLR     0x80.0
//  549     for(i=0;i<8;i++) //·¢ËÍÒ»¸ö°ËÎ»Êý¾Ý 
        MOV     R0,#0x8
//  550     { 
//  551         LCD_SCL=0; 
??LCD_WrCmd_0:
        CLR     0x90.2
//  552        
//  553         temp = cmd&0x80;
//  554         if (temp == 0)
        MOV     A,R1
        MOV     C,0xE0 /* A   */.7
        JC      ??LCD_WrCmd_1
//  555         {
//  556             LCD_SDA = 0;
        CLR     0x90.3
        SJMP    ??LCD_WrCmd_2
//  557         }
//  558         else
//  559         {
//  560             LCD_SDA = 1;
??LCD_WrCmd_1:
        SETB    0x90.3
//  561         }
//  562         LCD_SCL=1;
??LCD_WrCmd_2:
        SETB    0x90.2
//  563         cmd<<=1;;        
        CLR     C
        RLC     A
        MOV     R1,A
//  564     }     
        DEC     R0
        MOV     A,R0
        JNZ     ??LCD_WrCmd_0
//  565 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock27
        REQUIRE _A_P0
        REQUIRE _A_P1
//  566 
//  567 /*********************LCD ÉèÖÃ×ø±ê************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 void LCD_Set_Pos(unsigned char x, unsigned char y) 
LCD_Set_Pos:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI Function LCD_Set_Pos
        CODE
//  569 {
        FUNCALL LCD_Set_Pos, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Set_Pos, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Set_Pos, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  570     if(x>127) return;
        MOV     A,R6
        CLR     C
        SUBB    A,#-0x80
        JNC     ??LCD_Set_Pos_0
//  571     if(y>7) return;
        MOV     A,R7
        CLR     C
        SUBB    A,#0x8
        JNC     ??LCD_Set_Pos_0
//  572 
//  573     LCD_WrCmd(0xb0+y);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#-0x50
        ADD     A,R7
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  574     LCD_WrCmd(((x&0xf0)>>4)|0x10);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,R6
        SWAP    A
        ANL     A,#0xf
        ORL     A,#0x10
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  575     LCD_WrCmd((x&0x0f)|0x01); 
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#0xf
        ANL     A,R6
        ORL     A,#0x1
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  576 } 
??LCD_Set_Pos_0:
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock28
//  577 
//  578 /*********************LCDÈ«ÆÁ************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 void LCD_Fill(unsigned char bmp_dat) 
LCD_Fill:
        CFI Block cfiBlock29 Using cfiCommon0
        CFI Function LCD_Fill
        CODE
//  580 {
        FUNCALL LCD_Fill, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Fill, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Fill, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_Fill, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  581     unsigned char y,x;
//  582     for(y=0;y<8;y++)
        MOV     ?V0 + 0,#0x0
//  583     {
//  584         LCD_WrCmd(0xb0+y);
??LCD_Fill_0:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#-0x50
        ADD     A,?V0 + 0
        LCALL   ?Subroutine9 & 0xFFFF
//  585         LCD_WrCmd(0x01);
//  586         LCD_WrCmd(0x10);
//  587         for(x=0;x<X_WIDTH;x++)
//  588             LCD_WrDat(bmp_dat);
??CrossCallReturnLabel_12:
        ; Setup parameters for call to function LCD_WrDat
        MOV     A,R6
        MOV     R1,A
        LCALL   ??LCD_WrDat?relay
        DEC     R7
        MOV     A,R7
        JNZ     ??CrossCallReturnLabel_12
//  589     }
        INC     ?V0 + 0
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_Fill_0
        CFI EndBlock cfiBlock29
//  590 }
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock30 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock30
//  591 
//  592 /*********************LCD¸´Î»************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  593 void LCD_CLS(void)
LCD_CLS:
        CFI Block cfiBlock31 Using cfiCommon0
        CFI Function LCD_CLS
        CODE
//  594 {
        FUNCALL LCD_CLS, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_CLS, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_CLS, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_CLS, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  595     unsigned char y,x;    
//  596     for(y=0;y<8;y++)
        MOV     R7,#0x0
//  597     {
//  598         LCD_WrCmd(0xb0+y);
??LCD_CLS_0:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#-0x50
        ADD     A,R7
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
//  599         LCD_WrCmd(0x01);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x1
        LCALL   ?Subroutine10 & 0xFFFF
//  600         LCD_WrCmd(0x10); 
//  601         for(x=0;x<X_WIDTH;x++)
??CrossCallReturnLabel_14:
        MOV     R6,#-0x80
//  602             LCD_WrDat(0);
??LCD_CLS_1:
        ; Setup parameters for call to function LCD_WrDat
        MOV     R1,#0x0
        LCALL   ??LCD_WrDat?relay
        DEC     R6
        MOV     A,R6
        JNZ     ??LCD_CLS_1
//  603     }
        INC     R7
        MOV     A,R7
        CLR     C
        SUBB    A,#0x8
        JC      ??LCD_CLS_0
//  604 }
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock31
//  605 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  606 void LcdClearLine(unsigned char y, unsigned char count)
LcdClearLine:
        CFI Block cfiBlock32 Using cfiCommon0
        CFI Function LcdClearLine
        CODE
//  607 {
        FUNCALL LcdClearLine, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LcdClearLine, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LcdClearLine, LCD_WrCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LcdClearLine, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 6,R1
        MOV     ?V0 + 7,R2
//  608     unsigned char x,j;	
//  609     
//  610     for(j=y; j<(y+count); j++)
        MOV     R6,?V0 + 6
        SJMP    ??LcdClearLine_0
//  611     {
//  612         LCD_WrCmd(0xb0+j);
??LcdClearLine_1:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     A,#-0x50
        ADD     A,R6
        LCALL   ?Subroutine9 & 0xFFFF
//  613         LCD_WrCmd(0x01);
//  614         LCD_WrCmd(0x10); 
//  615         for(x=0;x<X_WIDTH;x++)
//  616            LCD_WrDat(0);
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function LCD_WrDat
        MOV     R1,#0x0
        LCALL   ??LCD_WrDat?relay
        DEC     R7
        MOV     A,R7
        JNZ     ??CrossCallReturnLabel_13
//  617     }
        INC     R6
??LcdClearLine_0:
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 2,?V0 + 7
        MOV     A,?V0 + 4
        ADD     A,?V0 + 2
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,?V0 + 0
        SUBB    A,R0
        CLR     A
        SUBB    A,R1
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??LcdClearLine_1
//  618 }
        LJMP    ??Subroutine14_0 & 0xFFFF
        CFI EndBlock cfiBlock32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        MOV     R1,A
        LCALL   ??LCD_WrCmd?relay
        ; Setup parameters for call to function LCD_WrCmd
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x1
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     R7,#-0x80
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35
//  619 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  620 void HalLcdWriteString (char *str, uint8 option)
HalLcdWriteString:
        CFI Block cfiBlock36 Using cfiCommon0
        CFI Function HalLcdWriteString
        CODE
//  621 {
        FUNCALL HalLcdWriteString, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, LcdClearLine
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcdWriteString, LCD_P8x16Str
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 4,R1
//  622   uint8 x=0,y=0,strLen;
//  623   uint8 lcdBuf[HAL_LCD_MAX_CHARS+1];
//  624     
//  625   x=0;
//  626   y = (option-1)*2;
        MOV     A,#-0x1
        ADD     A,?V0 + 4
        CLR     C
        RLC     A
        MOV     ?V0 + 3,A
//  627   strLen = (uint8)osal_strlen( (char*)str );
        ; Setup parameters for call to function osal_strlen
        LCALL   ?Subroutine8 & 0xFFFF
//  628 
//  629   /* Check boundries */
//  630   if ( strLen > HAL_LCD_MAX_CHARS )
??CrossCallReturnLabel_11:
        CLR     C
        SUBB    A,#0x11
        JC      ??HalLcdWriteString_0
//  631     strLen = HAL_LCD_MAX_CHARS;
        MOV     ?V0 + 6,#0x10
//  632 
//  633   osal_memset(lcdBuf, 0, HAL_LCD_MAX_CHARS+1);
??HalLcdWriteString_0:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x11
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  634   osal_memcpy( lcdBuf, str, strLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R4,?V0 + 6
        MOV     R5,#0x0
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 33)
//  635   
//  636   LcdClearLine(y, 2);
        ; Setup parameters for call to function LcdClearLine
        MOV     R2,#0x2
        MOV     R1,?V0 + 3
        LCALL   ??LcdClearLine?relay
//  637   LCD_P8x16Str(x, y, lcdBuf);
        ; Setup parameters for call to function LCD_P8x16Str
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 3
        MOV     R1,#0x0
        LCALL   ??LCD_P8x16Str?relay
//  638 }
        MOV     A,#0x11
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock36

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond37 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 33)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     ?V0 + 6,A
        RET
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
//  639 
//  640 #if 1
//  641 /***ÄÜÃèÊö£ºÏÔÊ¾8*16Ò»×é±ê×¼ASCII×Ö·û´®     ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7***/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  642 void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[])
LCD_P8x16Str:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function LCD_P8x16Str
        CODE
//  643 {
        FUNCALL LCD_P8x16Str, getChineseCode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_Set_Pos
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL LCD_P8x16Str, LCD_WrDat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 3,R2
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  644     unsigned char c=0,i=0,j=0;
        MOV     ?V0 + 5,#0x0
//  645     unsigned char* addr=0;
//  646     unsigned char wm=0;
        SJMP    ??LCD_P8x16Str_0
//  647 
//  648     while (ch[j]!='\0')
//  649     {    
//  650         if(x>120){
//  651             x=0;
//  652             y++;
//  653         }
//  654         
//  655         LCD_Set_Pos(x,y); 
//  656         if(IS_CHINESE(ch[j]))
//  657         {
//  658             //ÖÐÎÄÏÔÊ¾
//  659             addr=getChineseCode(&ch[j]);
??LCD_P8x16Str_1:
        ; Setup parameters for call to function getChineseCode
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??getChineseCode?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
//  660 
//  661             for(wm = 0;wm < 16;wm++)               
        MOV     ?V0 + 8,#0x0
//  662             {
//  663                 LCD_WrDat(addr[wm]);    
??LCD_P8x16Str_2:
        ; Setup parameters for call to function LCD_WrDat
        MOV     ?V0 + 6,?V0 + 8
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     DPL,A
        MOV     A,R7
        LCALL   ?Subroutine3 & 0xFFFF
//  664             }      
??CrossCallReturnLabel_0:
        JC      ??LCD_P8x16Str_2
//  665 
//  666             LCD_Set_Pos(x,y + 1); 
        ; Setup parameters for call to function LCD_Set_Pos
        MOV     R2,?V0 + 4
        MOV     R1,?V0 + 2
        LCALL   ??LCD_Set_Pos?relay
//  667             for(wm = 0;wm < 16;wm++)          
        MOV     ?V0 + 8,#0x0
//  668             {
//  669                 LCD_WrDat(addr[16+wm]);
??LCD_P8x16Str_3:
        ; Setup parameters for call to function LCD_WrDat
        LCALL   ?Subroutine5 & 0xFFFF
//  670             }
??CrossCallReturnLabel_4:
        MOV     A,R0
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??LCD_P8x16Str_3
//  671             
//  672             x+=16;
        MOV     A,#0x10
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
//  673             j+=2;
        INC     ?V0 + 5
??LCD_P8x16Str_4:
        INC     ?V0 + 5
//  674         }
??LCD_P8x16Str_0:
        MOV     ?V0 + 6,?V0 + 5
        MOV     A,?V0 + 0
        ADD     A,?V0 + 6
        MOV     R6,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      ??LCD_P8x16Str_5
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x79
        JC      ??LCD_P8x16Str_6
        MOV     ?V0 + 2,#0x0
        INC     ?V0 + 3
??LCD_P8x16Str_6:
        ; Setup parameters for call to function LCD_Set_Pos
        MOV     R2,?V0 + 3
        MOV     R1,?V0 + 2
        LCALL   ??LCD_Set_Pos?relay
        MOV     A,#0x1
        ADD     A,?V0 + 3
        MOV     ?V0 + 4,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#-0x80
        JNC     ??LCD_P8x16Str_1
//  675         else
//  676         {
//  677             //Ó¢ÎÄÏÔÊ¾
//  678             c =ch[j]-32;
        MOVX    A,@DPTR
        ADD     A,#-0x20
        MOV     ?V0 + 6,A
//  679 
//  680             for(i=0;i<8;i++)
        MOV     ?V0 + 8,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x4
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     R6,?V0 + 6
        MOV     R7,?V0 + 7
//  681             {
//  682                 LCD_WrDat(F8X16[c*16+i]);
??LCD_P8x16Str_7:
        ; Setup parameters for call to function LCD_WrDat
        LCALL   ?Subroutine5 & 0xFFFF
//  683             }
??CrossCallReturnLabel_5:
        MOV     A,#F8X16 & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(F8X16 >> 8) & 0xff
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        JC      ??LCD_P8x16Str_7
//  684 
//  685             LCD_Set_Pos(x,y+1);    
        ; Setup parameters for call to function LCD_Set_Pos
        MOV     R2,?V0 + 4
        MOV     R1,?V0 + 2
        LCALL   ??LCD_Set_Pos?relay
//  686             for(i=0;i<8;i++)
        MOV     ?V0 + 8,#0x0
//  687             {
//  688                 LCD_WrDat(F8X16[c*16+i+8]);  
??LCD_P8x16Str_8:
        ; Setup parameters for call to function LCD_WrDat
        LCALL   ?Subroutine5 & 0xFFFF
//  689             }
??CrossCallReturnLabel_6:
        MOV     A,#(F8X16 + 8) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((F8X16 + 8) >> 8) & 0xff
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??LCD_P8x16Str_8
//  690 
//  691             x+=8;
        MOV     A,#0x8
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
//  692             j++;
        SJMP    ??LCD_P8x16Str_4
//  693         }
//  694     }
//  695 }
??LCD_P8x16Str_5:
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock41

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond42 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker45 Using cfiCommon1
        CFI (cfiPicker45) NoFunction
        CFI (cfiPicker45) Picker
        MOV     ?V0 + 6,?V0 + 8
        MOV     A,R6
        ADD     A,?V0 + 6
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        RET
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond46 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        ADDC    A,R1
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        SUBB    A,#0x8
        RET
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond49 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        ADDC    A,#0x0
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_19:
        SUBB    A,#0x10
        RET
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_3
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond54 Using cfiCommon0
        CFI (cfiCond54) NoFunction
        CFI (cfiCond54) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_0
        CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond54) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond54) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond54) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond54) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond54) CFA_SP SP+0
        CFI (cfiCond54) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_1
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker56 Using cfiCommon1
        CFI (cfiPicker56) NoFunction
        CFI (cfiPicker56) Picker
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??LCD_WrDat?relay
        INC     ?V0 + 8
        MOV     A,?V0 + 8
        CLR     C
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiPicker56
//  696 #else
//  697 /***ÄÜÃèÊö£ºÏÔÊ¾8*16Ò»×é±ê×¼ASCII×Ö·û´®     ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7***/
//  698 void LCD_P8x16Str(unsigned char x, unsigned char y,unsigned char ch[])
//  699 {
//  700     unsigned char c=0,i=0,j=0;
//  701     
//  702     while (ch[j]!='\0')
//  703     {    
//  704         c =ch[j]-32;
//  705         if(x>120){
//  706           x=0;
//  707           y++;
//  708         }
//  709         LCD_Set_Pos(x,y);    
//  710         for(i=0;i<8;i++)     
//  711             LCD_WrDat(F8X16[c*16+i]);
//  712         LCD_Set_Pos(x,y+1);    
//  713         for(i=0;i<8;i++)     
//  714             LCD_WrDat(F8X16[c*16+i+8]);  
//  715         x+=8;
//  716         j++;
//  717     }
//  718 }
//  719 
//  720 /*****************¹¦ÄÜÃèÊö£ºÏÔÊ¾16*16µãÕó  ÏÔÊ¾µÄ×ø±ê£¨x,y£©£¬yÎªÒ³·¶Î§0¡«7****************************/
//  721 void LCD_P16x16Ch(unsigned char x, unsigned char y, unsigned char N)
//  722 {
//  723     unsigned char wm=0;
//  724     unsigned int adder=2*N;//32*N;        
//  725     LCD_Set_Pos(x , y);
//  726     for(wm = 0;wm < 16;wm++)               
//  727     {
//  728         LCD_WrDat(F16x16[adder]);    
//  729         adder += 1;
//  730     }      
//  731     LCD_Set_Pos(x,y + 1); 
//  732     for(wm = 0;wm < 16;wm++)          
//  733     {
//  734         LCD_WrDat(F16x16[adder]);
//  735         adder += 1;
//  736     }           
//  737 }
//  738 #endif
//  739 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  740 void HalLcd_HW_WaitUs(uint16 microSecs)
HalLcd_HW_WaitUs:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI Function HalLcd_HW_WaitUs
        CODE
//  741 {
        ; Saved register size: 0
        ; Auto size: 0
        SJMP    ??HalLcd_HW_WaitUs_0
//  742   while(microSecs--)
//  743   {
//  744     /* 32 NOPs == 1 usecs */
//  745     asm("nop"); asm("nop"); asm("nop"); asm("nop");
??HalLcd_HW_WaitUs_1:
        nop
        nop
        nop
        nop
//  746     asm("nop"); asm("nop"); asm("nop"); asm("nop");
        nop
        nop
        nop
        nop
//  747   }
??HalLcd_HW_WaitUs_0:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R2
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R3,A
        MOV     A,R0
        ORL     A,R1
        JNZ     ??HalLcd_HW_WaitUs_1
//  748 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock57
//  749 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  750 void HalLcd_HW_Init(void)
HalLcd_HW_Init:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI Function HalLcd_HW_Init
        CODE
//  751 {
        FUNCALL HalLcd_HW_Init, LCD_DLY_ms
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_WrCmd
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_Fill
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HalLcd_HW_Init, LCD_Set_Pos
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  752     P0SEL &= 0xFE; //ÈÃP0.0ÎªÆÕÍ¨IO¿Ú£¬
        ANL     0xf3,#0xfe
//  753     P0DIR |= 0x01; //ÈÃP0.0ÎªÎªÊä³ö
        ORL     0xfd,#0x1
//  754 
//  755     P1SEL &= 0x73; //ÈÃ P1.2 P1.3 P1.7ÎªÆÕÍ¨IO¿Ú
        ANL     0xf4,#0x73
//  756     P1DIR |= 0x8C; //°Ñ P1.2 P1.3 1.7ÉèÖÃÎªÊä³ö
        ORL     0xfe,#0x8c
//  757     
//  758     LCD_SCL=1;
        SETB    0x90.2
//  759     LCD_RST=0;
        CLR     0x90.7
//  760     LCD_DLY_ms(50);
        ; Setup parameters for call to function LCD_DLY_ms
        MOV     R2,#0x32
        MOV     R3,#0x0
        LCALL   ??LCD_DLY_ms?relay
//  761     LCD_RST=1;      //´ÓÉÏµçµ½ÏÂÃæ¿ªÊ¼³õÊ¼»¯ÒªÓÐ×ã¹»µÄÊ±¼ä£¬¼´µÈ´ýRC¸´Î»Íê±Ï   
        SETB    0x90.7
//  762     LCD_WrCmd(0xae);//--turn off oled panel
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x52
        LCALL   ??LCD_WrCmd?relay
//  763     LCD_WrCmd(0x00);//---set low column address
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x0
        LCALL   ?Subroutine10 & 0xFFFF
//  764     LCD_WrCmd(0x10);//---set high column address
//  765     LCD_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x40
        LCALL   ??LCD_WrCmd?relay
//  766     LCD_WrCmd(0x81);//--set contrast control register
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x7f
        LCALL   ??LCD_WrCmd?relay
//  767     LCD_WrCmd(0xcf); // Set SEG Output Current Brightness
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x31
        LCALL   ??LCD_WrCmd?relay
//  768     LCD_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0×óÓÒ·´ÖÃ 0xa1Õý³£
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x5f
        LCALL   ??LCD_WrCmd?relay
//  769     LCD_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0ÉÏÏÂ·´ÖÃ 0xc8Õý³£
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x38
        LCALL   ?Subroutine11 & 0xFFFF
//  770     LCD_WrCmd(0xa6);//--set normal display
//  771     LCD_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x58
        LCALL   ??LCD_WrCmd?relay
//  772     LCD_WrCmd(0x3f);//--1/64 duty
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x3f
        LCALL   ??LCD_WrCmd?relay
//  773     LCD_WrCmd(0xd3);//-set display offset    Shift Mapping RAM Counter (0x00~0x3F)
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x2d
        LCALL   ??LCD_WrCmd?relay
//  774     LCD_WrCmd(0x00);//-not offset
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x0
        LCALL   ??LCD_WrCmd?relay
//  775     LCD_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x2b
        LCALL   ??LCD_WrCmd?relay
//  776     LCD_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x80
        LCALL   ??LCD_WrCmd?relay
//  777     LCD_WrCmd(0xd9);//--set pre-charge period
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x27
        LCALL   ??LCD_WrCmd?relay
//  778     LCD_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0xf
        LCALL   ??LCD_WrCmd?relay
//  779     LCD_WrCmd(0xda);//--set com pins hardware configuration
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x26
        LCALL   ??LCD_WrCmd?relay
//  780     LCD_WrCmd(0x12);
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x12
        LCALL   ??LCD_WrCmd?relay
//  781     LCD_WrCmd(0xdb);//--set vcomh
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x25
        LCALL   ??LCD_WrCmd?relay
//  782     LCD_WrCmd(0x40);//Set VCOM Deselect Level
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x40
        LCALL   ??LCD_WrCmd?relay
//  783     LCD_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x20
        LCALL   ??LCD_WrCmd?relay
//  784     LCD_WrCmd(0x02);//
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x2
        LCALL   ??LCD_WrCmd?relay
//  785     LCD_WrCmd(0x8d);//--set Charge Pump enable/disable
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x73
        LCALL   ??LCD_WrCmd?relay
//  786     LCD_WrCmd(0x14);//--set(0x10) disable
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x14
        LCALL   ??LCD_WrCmd?relay
//  787     LCD_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x5c
        LCALL   ?Subroutine11 & 0xFFFF
//  788     LCD_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
//  789     LCD_WrCmd(0xaf);//--turn on oled panel
??CrossCallReturnLabel_17:
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x51
        LCALL   ??LCD_WrCmd?relay
//  790     LCD_Fill(0x00);  //³õÊ¼ÇåÆÁ 
        ; Setup parameters for call to function LCD_Fill
        MOV     R1,#0x0
        LCALL   ??LCD_Fill?relay
//  791     LCD_Set_Pos(0,0); 
        ; Setup parameters for call to function LCD_Set_Pos
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??LCD_Set_Pos?relay
//  792 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock58
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond60) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond60) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond60) CFA_SP SP+-5
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        LCALL   ??LCD_WrCmd?relay
        ; Setup parameters for call to function LCD_WrCmd
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#-0x5a
        LCALL   ??LCD_WrCmd?relay
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond62 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_14
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond63 Using cfiCommon0
        CFI (cfiCond63) NoFunction
        CFI (cfiCond63) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond63) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond63) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond63) CFA_SP SP+-5
        CFI Block cfiPicker64 Using cfiCommon1
        CFI (cfiPicker64) NoFunction
        CFI (cfiPicker64) Picker
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_21:
        RET
        CFI EndBlock cfiCond62
        CFI EndBlock cfiCond63
        CFI EndBlock cfiPicker64

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_13
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond67 Using cfiCommon0
        CFI (cfiCond67) NoFunction
        CFI (cfiCond67) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_14
        CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond67) CFA_SP SP+0
        CFI (cfiCond67) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond68 Using cfiCommon0
        CFI (cfiCond68) NoFunction
        CFI (cfiCond68) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_15
        CFI (cfiCond68) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond68) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond68) CFA_SP SP+-5
        CFI Block cfiPicker69 Using cfiCommon1
        CFI (cfiPicker69) NoFunction
        CFI (cfiPicker69) Picker
        LCALL   ??LCD_WrCmd?relay
        ; Setup parameters for call to function LCD_WrCmd
        ; Setup parameters for call to function LCD_WrCmd
        ; Setup parameters for call to function LCD_WrCmd
        ; Setup parameters for call to function LCD_WrCmd
        MOV     R1,#0x10
        LCALL   ??LCD_WrCmd?relay
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiCond67
        CFI EndBlock cfiCond68
        CFI EndBlock cfiPicker69

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??getChineseCode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    getChineseCode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteScreen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteScreen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteStringValueValue?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteStringValueValue

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??DelayMS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    DelayMS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_DLY_ms?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_DLY_ms

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WrDat?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WrDat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_WrCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_WrCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Set_Pos?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Set_Pos

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_Fill?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_Fill

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_CLS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_CLS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LcdClearLine?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LcdClearLine

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcdWriteString?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcdWriteString

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??LCD_P8x16Str?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    LCD_P8x16Str

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_WaitUs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_WaitUs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HalLcd_HW_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HalLcd_HW_Init

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "  ">`:
        DB "  "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\273\\266">`:
        DB "\273\266"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\323\\255">`:
        DB "\323\255"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\312\\271">`:
        DB "\312\271"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\323\\303">`:
        DB "\323\303"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\322\\332">`:
        DB "\322\332"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\321\\320">`:
        DB "\321\320"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\265\\347">`:
        DB "\265\347"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\327\\323">`:
        DB "\327\323"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\277\\252">`:
        DB "\277\252"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\267\\242">`:
        DB "\267\242"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\260\\345">`:
        DB "\260\345"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\273\\260">`:
        DB "\273\260"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\304\\343">`:
        DB "\304\343"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\272\\303">`:
        DB "\272\303"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\316\\302">`:
        DB "\316\302"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\266\\310">`:
        DB "\266\310"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\243\\272">`:
        DB "\243\272"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\312\\252">`:
        DB "\312\252"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\310\\313">`:
        DB "\310\313"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\314\\345">`:
        DB "\314\345"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\306\\370">`:
        DB "\306\370"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\323\\320">`:
        DB "\323\320"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\316\\336">`:
        DB "\316\336"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\325\\375">`:
        DB "\325\375"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\324\\332">`:
        DB "\324\332"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\311\\317">`:
        DB "\311\317"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\264\\253">`:
        DB "\264\253"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\271\\342">`:
        DB "\271\342"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\325\\325">`:
        DB "\325\325"

        END
//  793 
//  794 
//  795 #endif
// 
// 1 519 bytes in segment BANKED_CODE
//   108 bytes in segment BANK_RELAYS
//     6 bytes in segment SFR_AN
// 2 630 bytes in segment XDATA_ROM_C
// 
// 1 627 bytes of CODE  memory
// 2 630 bytes of CONST memory
//     0 bytes of DATA  memory (+ 6 bytes shared)
//
//Errors: none
//Warnings: 1
