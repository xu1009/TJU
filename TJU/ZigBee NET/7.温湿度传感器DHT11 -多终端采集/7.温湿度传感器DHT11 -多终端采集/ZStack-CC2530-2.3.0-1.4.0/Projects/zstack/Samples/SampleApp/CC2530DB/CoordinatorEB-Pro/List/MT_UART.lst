###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         29/Dec/2016  17:22:01 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Components\m #
#                          t\MT_UART.c                                        #
#    Command line       =  -f "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸Ð #
#                          Æ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11            #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wCoord.cfg" (-DCPU32MHZ -DROOT=__near_func  #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg" (-DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Components\m #
#                          t\MT_UART.c" -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK  #
#                          -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                 #
#                          LCD_SUPPORTED=DEBUG -D HAL_ADC -lC                 #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\" -lA "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊ #
#                          ª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11     #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\" --diag_suppress Pe001,Pa010 -o               #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\O #
#                          bj\" -e --debug --core=plain --dptr=16,1           #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸Ð #
#                          Æ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11            #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\" -I                #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\" -I      #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\" -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊ #
#                          ª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11     #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MT\" -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\ #
#                          7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT1 #
#                          1 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\z #
#                          stack\Samples\SampleApp\CC2530DB\..\..\..\..\..\CO #
#                          MPONENTS\HAL\INCLUDE\" -I                          #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\" -I                    #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\" -I                         #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\" -I                           #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\AF\" -I "I:\BaiduNetdiskDownload\5×éÍ #
#                          øÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                          #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\" -I "I:\BaiduNetdiskDownload\5×é #
#                          ÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                         #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SEC\" -I "I:\BaiduNetdiskDownload\5×é #
#                          ÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                         #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\" -I "I:\BaiduNetdiskDownload\5× #
#                          éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                        #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SYS\" -I "I:\BaiduNetdiskDownload\5×é #
#                          ÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                         #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\" -I "I:\BaiduNetdiskDownload\5×é #
#                          ÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                         #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\F8W\" -I "I:\BaiduNetdiskDownload\5×éÍ #
#                          øÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                          #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\" -I "I:\BaiduNetdiskDownload\5×éÍøÊµÑ #
#                          é\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\SERVICES\SADDR\" -I                     #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\" -I                         #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\" -I "I:\BaiduNetdiskDownload\5 #
#                          ×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                       #
#                          -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                    #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\HIGH_LEVEL\" -I                         #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\" -I                    #
#                          "I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11               #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz      #
#    List file          =  I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\L #
#                          ist\MT_UART.lst                                    #
#    Object file        =  I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11                #
#                          -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\O #
#                          bj\MT_UART.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

I:\BaiduNetdiskDownload\5×éÍøÊµÑé\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 -¶àÖÕ¶Ë²É¼¯\ZStack-CC2530-2.3.0-1.4.0\Components\mt\MT_UART.c
      1          /***************************************************************************************************
      2            Filename:       MT_UART.c
      3            Revised:        $Date: 2009-03-12 16:25:22 -0700 (Thu, 12 Mar 2009) $
      4            Revision:       $Revision: 19404 $
      5          
      6            Description:  This module handles anything dealing with the serial port.
      7          
      8            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38          ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "hal_uart.h"
     46          #include "MT.h"
     47          #include "MT_UART.h"
     48          #include "OSAL_Memory.h"
     49          
     50          
     51          /***************************************************************************************************
     52           * MACROS
     53           ***************************************************************************************************/
     54          
     55          /***************************************************************************************************
     56           * CONSTANTS
     57           ***************************************************************************************************/
     58          /* State values for ZTool protocal */
     59          #define SOP_STATE      0x00
     60          #define CMD_STATE1     0x01
     61          #define CMD_STATE2     0x02
     62          #define LEN_STATE      0x03
     63          #define DATA_STATE     0x04
     64          #define FCS_STATE      0x05
     65          
     66          /***************************************************************************************************
     67           *                                         GLOBAL VARIABLES
     68           ***************************************************************************************************/
     69          /* Used to indentify the application ID for osal task */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     70          byte App_TaskID;
   \                     App_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     71          
     72          /* ZTool protocal parameters */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     73          uint8 state;
   \                     state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     74          uint8  CMD_Token[2];
   \                     CMD_Token:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     75          uint8  LEN_Token;
   \                     LEN_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     76          uint8  FSC_Token;
   \                     FSC_Token:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     77          mtOSALSerialData_t  *pMsg;
   \                     pMsg:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     78          uint8  tempDataLen;
   \                     tempDataLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     79          extern void SerialApp_CallBack(uint8 port, uint8 event);
     80          
     81          #if defined (ZAPP_P1) || defined (ZAPP_P2)
     82          uint16  MT_UartMaxZAppBufLen;
     83          bool    MT_UartZAppRxStatus;
     84          #endif
     85          
     86          
     87          /***************************************************************************************************
     88           *                                          LOCAL FUNCTIONS
     89           ***************************************************************************************************/
     90          
     91          /***************************************************************************************************
     92           * @fn      MT_UartInit
     93           *
     94           * @brief   Initialize MT with UART support
     95           *
     96           * @param   None
     97           *
     98           * @return  None
     99          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    100          void MT_UartInit ()
   \                     MT_UartInit:
    101          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    102            halUARTCfg_t uartConfig;
    103          
    104            /* Initialize APP ID */
    105            App_TaskID = 0;
   \   000009   90....       MOV     DPTR,#App_TaskID
   \   00000C   E4           CLR     A
   \   00000D   F0           MOVX    @DPTR,A
    106          
    107            /* UART Configuration */
    108            uartConfig.configured           = TRUE;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
    109            uartConfig.baudRate             = MT_UART_DEFAULT_BAUDRATE;
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E4           CLR     A
   \   00001A   F0           MOVX    @DPTR,A
    110            uartConfig.flowControl          = MT_UART_DEFAULT_OVERFLOW;
   \   00001B   7402         MOV     A,#0x2
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E4           CLR     A
   \   000021   F0           MOVX    @DPTR,A
    111            uartConfig.flowControlThreshold = MT_UART_DEFAULT_THRESHOLD;
   \   000022   7403         MOV     A,#0x3
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7440         MOV     A,#0x40
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
    112            uartConfig.rx.maxBufSize        = MT_UART_DEFAULT_MAX_RX_BUFF;
   \   00002D   740A         MOV     A,#0xa
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7480         MOV     A,#-0x80
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E4           CLR     A
   \   000037   F0           MOVX    @DPTR,A
    113            uartConfig.tx.maxBufSize        = MT_UART_DEFAULT_MAX_TX_BUFF;
   \   000038   7412         MOV     A,#0x12
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   7480         MOV     A,#-0x80
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   E4           CLR     A
   \   000042   F0           MOVX    @DPTR,A
    114            uartConfig.idleTimeout          = MT_UART_DEFAULT_IDLE_TIMEOUT;
   \   000043   7405         MOV     A,#0x5
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   7406         MOV     A,#0x6
   \   00004A   F0           MOVX    @DPTR,A
    115            uartConfig.intEnable            = TRUE;
   \   00004B   7416         MOV     A,#0x16
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
    116          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    117            uartConfig.callBackFunc         = SerialApp_CallBack;
   \   000053   741B         MOV     A,#0x1b
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   74..         MOV     A,#??SerialApp_CallBack?relay & 0xff
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   74..         MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
   \   00005E   12....       LCALL   ?Subroutine2 & 0xFFFF
    118          #elif defined (ZAPP_P1) || defined (ZAPP_P2)
    119            uartConfig.callBackFunc         = SerialApp_CallBack;
    120          #else
    121            uartConfig.callBackFunc         = NULL;
    122          #endif
    123          
    124            /* Start UART */
    125          #if defined (MT_UART_DEFAULT_PORT)
    126             //³õÊ¼Ê¼»¯´®¿Ú0
    127              HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \                     ??CrossCallReturnLabel_2:
   \   000061   7900         MOV     R1,#0x0
   \   000063   12....       LCALL   ??HalUARTOpen?relay
    128          
    129                //³õÊ¼Ê¼»¯´®¿Ú1
    130              uartConfig.baudRate=HAL_UART_BR_9600;
   \   000066   7401         MOV     A,#0x1
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   E4           CLR     A
   \   00006C   12....       LCALL   ?Subroutine2 & 0xFFFF
    131              HalUARTOpen (HAL_UART_PORT_1, &uartConfig);
   \                     ??CrossCallReturnLabel_3:
   \   00006F   7901         MOV     R1,#0x1
   \   000071   12....       LCALL   ??HalUARTOpen?relay
    132          #else
    133            /* Silence IAR compiler warning */
    134            (void)uartConfig;
    135          #endif
    136          
    137            /* Initialize for ZApp */
    138          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    139            /* Default max bytes that ZAPP can take */
    140            MT_UartMaxZAppBufLen  = 1;
    141            MT_UartZAppRxStatus   = MT_UART_ZAPP_RX_READY;
    142          #endif
    143          
    144          }
   \   000074   741D         MOV     A,#0x1d
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
   \   000079                REQUIRE ?Subroutine0
   \   000079                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET
    145          
    146          /***************************************************************************************************
    147           * @fn      MT_SerialRegisterTaskID
    148           *
    149           * @brief   This function registers the taskID of the application so it knows
    150           *          where to send the messages whent they come in.
    151           *
    152           * @param   void
    153           *
    154           * @return  void
    155           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    156          void MT_UartRegisterTaskID( byte taskID )
   \                     MT_UartRegisterTaskID:
    157          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    158            App_TaskID = taskID;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#App_TaskID
   \   000008   F0           MOVX    @DPTR,A
    159          }
   \   000009   80..         SJMP    ?Subroutine0
    160          
    161          /***************************************************************************************************
    162           * @fn      SPIMgr_CalcFCS
    163           *
    164           * @brief   Calculate the FCS of a message buffer by XOR'ing each byte.
    165           *          Remember to NOT include SOP and FCS fields, so start at the CMD field.
    166           *
    167           * @param   byte *msg_ptr - message pointer
    168           * @param   byte len - length (in bytes) of message
    169           *
    170           * @return  result byte
    171           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    172          byte MT_UartCalcFCS( uint8 *msg_ptr, uint8 len )
   \                     MT_UartCalcFCS:
    173          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
    174            byte x;
    175            byte xorResult;
    176          
    177            xorResult = 0;
   \   000006   7900         MOV     R1,#0x0
    178          
    179            for ( x = 0; x < len; x++, msg_ptr++ )
   \   000008   7800         MOV     R0,#0x0
   \   00000A   800E         SJMP    ??MT_UartCalcFCS_0
    180              xorResult = xorResult ^ *msg_ptr;
   \                     ??MT_UartCalcFCS_1:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   E0           MOVX    A,@DPTR
   \   000011   C9           XCH     A,R1
   \   000012   69           XRL     A,R1
   \   000013   F9           MOV     R1,A
   \   000014   08           INC     R0
   \   000015   A3           INC     DPTR
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \                     ??MT_UartCalcFCS_0:
   \   00001A   E8           MOV     A,R0
   \   00001B   C3           CLR     C
   \   00001C   9C           SUBB    A,R4
   \   00001D   40ED         JC      ??MT_UartCalcFCS_1
    181          
    182            return ( xorResult );
   \   00001F   80..         SJMP    ?Subroutine0
    183          }
    184          
    185          
    186          /***************************************************************************************************
    187           * @fn      MT_UartProcessZToolData
    188           *
    189           * @brief   | SOP | Data Length  |   CMD   |   Data   |  FCS  |
    190           *          |  1  |     1        |    2    |  0-Len   |   1   |
    191           *
    192           *          Parses the data and determine either is SPI or just simply serial data
    193           *          then send the data to correct place (MT or APP)
    194           *
    195           * @param   port     - UART port
    196           *          event    - Event that causes the callback
    197           *
    198           *
    199           * @return  None
    200           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    201          void MT_UartProcessZToolData ( uint8 port, uint8 event )
   \                     MT_UartProcessZToolData:
    202          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    203            uint8  ch;
    204            uint8  bytesInRxBuffer;
    205            
    206            (void)event;  // Intentionally unreferenced parameter
   \   00000C   8032         SJMP    ??MT_UartProcessZToolData_0
    207          
    208            while (Hal_UART_RxBufLen(port))
    209            {
    210              HalUARTRead (port, &ch, 1);
    211          
    212              switch (state)
    213              {
    214                case SOP_STATE:
    215                  if (ch == MT_UART_SOF)
    216                    state = LEN_STATE;
    217                  break;
    218          
    219                case LEN_STATE:
    220                  LEN_Token = ch;
    221          
    222                  tempDataLen = 0;
    223          
    224                  /* Allocate memory for the data */
    225                  pMsg = (mtOSALSerialData_t *)osal_msg_allocate( sizeof ( mtOSALSerialData_t ) +
    226                                                                  MT_RPC_FRAME_HDR_SZ + LEN_Token );
    227          
    228                  if (pMsg)
    229                  {
    230                    /* Fill up what we can */
    231                    pMsg->hdr.event = CMD_SERIAL_MSG;
   \                     ??MT_UartProcessZToolData_1:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F583         MOV     DPH,A
   \   000011   8882         MOV     DPL,R0
   \   000013   7401         MOV     A,#0x1
   \   000015   F0           MOVX    @DPTR,A
    232                    pMsg->msg = (uint8*)(pMsg+1);
   \   000016   90....       MOV     DPTR,#pMsg
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   2404         ADD     A,#0x4
   \   00001C   F8           MOV     R0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000025   E8           MOV     A,R0
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ?Subroutine5 & 0xFFFF
    233                    pMsg->msg[MT_RPC_POS_LEN] = LEN_Token;
   \                     ??CrossCallReturnLabel_8:
   \   00002C   C0E0         PUSH    A
   \   00002E   90....       MOV     DPTR,#pMsg
   \   000031   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000034   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000037   D0E0         POP     A
   \   000039   F0           MOVX    @DPTR,A
    234                    state = CMD_STATE1;
   \   00003A   90....       MOV     DPTR,#state
   \   00003D   7401         MOV     A,#0x1
   \                     ??MT_UartProcessZToolData_2:
   \   00003F   F0           MOVX    @DPTR,A
    235                  }
    236                  else
    237                  {
    238                    state = SOP_STATE;
    239                    return;
    240                  }
    241                  break;
   \                     ??MT_UartProcessZToolData_0:
   \   000040                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000040   EE           MOV     A,R6
   \   000041   F9           MOV     R1,A
   \   000042   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000045   8B..         MOV     ?V0 + 1,R3
   \   000047   EA           MOV     A,R2
   \   000048   45..         ORL     A,?V0 + 1
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??MT_UartProcessZToolData_3 & 0xFFFF
   \   00004F                ; Setup parameters for call to function HalUARTRead
   \   00004F   7C01         MOV     R4,#0x1
   \   000051   7D00         MOV     R5,#0x0
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   AA82         MOV     R2,DPL
   \   00005B   AB83         MOV     R3,DPH
   \   00005D   EE           MOV     A,R6
   \   00005E   F9           MOV     R1,A
   \   00005F   12....       LCALL   ??HalUARTRead?relay
   \   000062   90....       MOV     DPTR,#pMsg
   \   000065   E0           MOVX    A,@DPTR
   \   000066   2402         ADD     A,#0x2
   \   000068   F8           MOV     R0,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   3400         ADDC    A,#0x0
   \   00006D   F9           MOV     R1,A
   \   00006E   E8           MOV     A,R0
   \   00006F   FA           MOV     R2,A
   \   000070   E9           MOV     A,R1
   \   000071   FB           MOV     R3,A
   \   000072   90....       MOV     DPTR,#state
   \   000075   E0           MOVX    A,@DPTR
   \   000076   601A         JZ      ??MT_UartProcessZToolData_4
   \   000078   14           DEC     A
   \   000079   606B         JZ      ??MT_UartProcessZToolData_5
   \   00007B   14           DEC     A
   \   00007C   7003         JNZ     $+5
   \   00007E   02....       LJMP    ??MT_UartProcessZToolData_6 & 0xFFFF
   \   000081   14           DEC     A
   \   000082   6020         JZ      ??MT_UartProcessZToolData_7
   \   000084   14           DEC     A
   \   000085   7003         JNZ     $+5
   \   000087   02....       LJMP    ??MT_UartProcessZToolData_8 & 0xFFFF
   \   00008A   14           DEC     A
   \   00008B   7003         JNZ     $+5
   \   00008D   02....       LJMP    ??MT_UartProcessZToolData_9 & 0xFFFF
   \   000090   80AE         SJMP    ??MT_UartProcessZToolData_0
   \                     ??MT_UartProcessZToolData_4:
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   E0           MOVX    A,@DPTR
   \   000099   64FE         XRL     A,#0xfe
   \   00009B   70A3         JNZ     ??MT_UartProcessZToolData_0
   \   00009D   90....       MOV     DPTR,#state
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   809B         SJMP    ??MT_UartProcessZToolData_2
   \                     ??MT_UartProcessZToolData_7:
   \   0000A4   85..82       MOV     DPL,?XSP + 0
   \   0000A7   85..83       MOV     DPH,?XSP + 1
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   90....       MOV     DPTR,#LEN_Token
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   90....       MOV     DPTR,#tempDataLen
   \   0000B2   E4           CLR     A
   \   0000B3   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000B6   2407         ADD     A,#0x7
   \   0000B8   FA           MOV     R2,A
   \   0000B9   E4           CLR     A
   \   0000BA   3400         ADDC    A,#0x0
   \   0000BC   FB           MOV     R3,A
   \   0000BD   12....       LCALL   ??osal_msg_allocate?relay
   \   0000C0   90....       MOV     DPTR,#pMsg
   \   0000C3   EA           MOV     A,R2
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   EB           MOV     A,R3
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   90....       MOV     DPTR,#pMsg
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F8           MOV     R0,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F9           MOV     R1,A
   \   0000D0   E8           MOV     A,R0
   \   0000D1   49           ORL     A,R1
   \   0000D2   6003         JZ      $+5
   \   0000D4   02....       LJMP    ??MT_UartProcessZToolData_1 & 0xFFFF
   \   0000D7   90....       MOV     DPTR,#state
   \   0000DA   E4           CLR     A
   \   0000DB   F0           MOVX    @DPTR,A
   \                     ??MT_UartProcessZToolData_3:
   \   0000DC   7401         MOV     A,#0x1
   \   0000DE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E1   7F02         MOV     R7,#0x2
   \   0000E3   02....       LJMP    ?BANKED_LEAVE_XDATA
    242          
    243                case CMD_STATE1:
    244                  pMsg->msg[MT_RPC_POS_CMD0] = ch;
   \                     ??MT_UartProcessZToolData_5:
   \   0000E6   85..82       MOV     DPL,?XSP + 0
   \   0000E9   85..83       MOV     DPH,?XSP + 1
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   C0E0         PUSH    A
   \   0000EF   8A82         MOV     DPL,R2
   \   0000F1   8B83         MOV     DPH,R3
   \   0000F3   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000F6   A3           INC     DPTR
   \   0000F7   D0E0         POP     A
   \   0000F9   F0           MOVX    @DPTR,A
    245                  state = CMD_STATE2;
   \   0000FA   90....       MOV     DPTR,#state
   \   0000FD   7402         MOV     A,#0x2
   \   0000FF   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    246                  break;
    247          
    248                case CMD_STATE2:
    249                  pMsg->msg[MT_RPC_POS_CMD1] = ch;
   \                     ??MT_UartProcessZToolData_6:
   \   000102   85..82       MOV     DPL,?XSP + 0
   \   000105   85..83       MOV     DPH,?XSP + 1
   \   000108   E0           MOVX    A,@DPTR
   \   000109   C0E0         PUSH    A
   \   00010B   8A82         MOV     DPL,R2
   \   00010D   8B83         MOV     DPH,R3
   \   00010F   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000112   D0E0         POP     A
   \   000114   12....       LCALL   ?Subroutine5 & 0xFFFF
    250                  /* If there is no data, skip to FCS state */
    251                  if (LEN_Token)
   \                     ??CrossCallReturnLabel_10:
   \   000117   607F         JZ      ??MT_UartProcessZToolData_10
    252                  {
    253                    state = DATA_STATE;
   \   000119   90....       MOV     DPTR,#state
   \   00011C   7404         MOV     A,#0x4
   \   00011E   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    254                  }
    255                  else
    256                  {
    257                    state = FCS_STATE;
    258                  }
    259                  break;
    260          
    261                case DATA_STATE:
    262          
    263                  /* Fill in the buffer the first byte of the data */
    264                  pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen++] = ch;
   \                     ??MT_UartProcessZToolData_8:
   \   000121   85..82       MOV     DPL,?XSP + 0
   \   000124   85..83       MOV     DPH,?XSP + 1
   \   000127   E0           MOVX    A,@DPTR
   \   000128   C0E0         PUSH    A
   \   00012A   90....       MOV     DPTR,#tempDataLen
   \   00012D   E0           MOVX    A,@DPTR
   \   00012E   F8           MOV     R0,A
   \   00012F   8A82         MOV     DPL,R2
   \   000131   8B83         MOV     DPH,R3
   \   000133   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000136   D0E0         POP     A
   \   000138   F0           MOVX    @DPTR,A
   \   000139   90....       MOV     DPTR,#tempDataLen
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   04           INC     A
   \   00013E   F0           MOVX    @DPTR,A
    265          
    266                  /* Check number of bytes left in the Rx buffer */
    267                  bytesInRxBuffer = Hal_UART_RxBufLen(port);
   \   00013F                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   00013F   EE           MOV     A,R6
   \   000140   F9           MOV     R1,A
   \   000141   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   000144   EA           MOV     A,R2
   \   000145   FF           MOV     R7,A
    268          
    269                  /* If the remain of the data is there, read them all, otherwise, just read enough */
    270                  if (bytesInRxBuffer <= LEN_Token - tempDataLen)
   \   000146   90....       MOV     DPTR,#tempDataLen
   \   000149   E0           MOVX    A,@DPTR
   \   00014A   F8           MOV     R0,A
   \   00014B   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00014E   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000151   AA82         MOV     R2,DPL
   \   000153   AB83         MOV     R3,DPH
   \   000155   90....       MOV     DPTR,#LEN_Token
   \   000158   E0           MOVX    A,@DPTR
   \   000159   C3           CLR     C
   \   00015A   98           SUBB    A,R0
   \   00015B   FC           MOV     R4,A
   \   00015C   95E0         SUBB    A,0xE0 /* A   */
   \   00015E   FD           MOV     R5,A
   \   00015F   8F..         MOV     ?V0 + 0,R7
   \   000161   C3           CLR     C
   \   000162   EC           MOV     A,R4
   \   000163   95..         SUBB    A,?V0 + 0
   \   000165   ED           MOV     A,R5
   \   000166   9400         SUBB    A,#0x0
   \   000168   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00016A   65D0         XRL     A,PSW
   \   00016C   33           RLC     A
   \   00016D   4010         JC      ??MT_UartProcessZToolData_11
    271                  {
    272                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], bytesInRxBuffer);
   \   00016F                ; Setup parameters for call to function HalUARTRead
   \   00016F   AC..         MOV     R4,?V0 + 0
   \   000171   7D00         MOV     R5,#0x0
   \   000173   EE           MOV     A,R6
   \   000174   F9           MOV     R1,A
   \   000175   12....       LCALL   ??HalUARTRead?relay
    273                    tempDataLen += bytesInRxBuffer;
   \   000178   90....       MOV     DPTR,#tempDataLen
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   2F           ADD     A,R7
   \   00017D   800C         SJMP    ??MT_UartProcessZToolData_12
    274                  }
    275                  else
    276                  {
    277                    HalUARTRead (port, &pMsg->msg[MT_RPC_FRAME_HDR_SZ + tempDataLen], LEN_Token - tempDataLen);
   \                     ??MT_UartProcessZToolData_11:
   \   00017F                ; Setup parameters for call to function HalUARTRead
   \   00017F   EE           MOV     A,R6
   \   000180   F9           MOV     R1,A
   \   000181   12....       LCALL   ??HalUARTRead?relay
    278                    tempDataLen += (LEN_Token - tempDataLen);
   \   000184   90....       MOV     DPTR,#LEN_Token
   \   000187   E0           MOVX    A,@DPTR
   \   000188   90....       MOV     DPTR,#tempDataLen
   \                     ??MT_UartProcessZToolData_12:
   \   00018B   F0           MOVX    @DPTR,A
    279                  }
    280          
    281                  /* If number of bytes read is equal to data length, time to move on to FCS */
    282                  if ( tempDataLen == LEN_Token )
   \   00018C   E0           MOVX    A,@DPTR
   \   00018D   F8           MOV     R0,A
   \   00018E   90....       MOV     DPTR,#LEN_Token
   \   000191   E0           MOVX    A,@DPTR
   \   000192   68           XRL     A,R0
   \   000193   6003         JZ      $+5
   \   000195   02....       LJMP    ??MT_UartProcessZToolData_0 & 0xFFFF
   \                     ??MT_UartProcessZToolData_10:
   \   000198   90....       MOV     DPTR,#state
   \   00019B   7405         MOV     A,#0x5
   \   00019D   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    283                      state = FCS_STATE;
    284          
    285                  break;
    286          
    287                case FCS_STATE:
    288          
    289                  FSC_Token = ch;
   \                     ??MT_UartProcessZToolData_9:
   \   0001A0   85..82       MOV     DPL,?XSP + 0
   \   0001A3   85..83       MOV     DPH,?XSP + 1
   \   0001A6   E0           MOVX    A,@DPTR
   \   0001A7   90....       MOV     DPTR,#FSC_Token
   \   0001AA   12....       LCALL   ?Subroutine5 & 0xFFFF
    290          
    291                  /* Make sure it's correct */
    292                  if ((MT_UartCalcFCS ((uint8*)&pMsg->msg[0], MT_RPC_FRAME_HDR_SZ + LEN_Token) == FSC_Token))
   \                     ??CrossCallReturnLabel_11:
   \   0001AD   2403         ADD     A,#0x3
   \   0001AF   F9           MOV     R1,A
   \   0001B0   8A82         MOV     DPL,R2
   \   0001B2   8B83         MOV     DPH,R3
   \   0001B4   E0           MOVX    A,@DPTR
   \   0001B5   FA           MOV     R2,A
   \   0001B6   A3           INC     DPTR
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   FB           MOV     R3,A
   \   0001B9   12....       LCALL   ??MT_UartCalcFCS?relay
   \   0001BC   E9           MOV     A,R1
   \   0001BD   F8           MOV     R0,A
   \   0001BE   90....       MOV     DPTR,#FSC_Token
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   68           XRL     A,R0
   \   0001C3   90....       MOV     DPTR,#pMsg
   \   0001C6   700F         JNZ     ??MT_UartProcessZToolData_13
    293                  {
    294                    osal_msg_send( App_TaskID, (byte *)pMsg );
   \   0001C8                ; Setup parameters for call to function osal_msg_send
   \   0001C8   E0           MOVX    A,@DPTR
   \   0001C9   FA           MOV     R2,A
   \   0001CA   A3           INC     DPTR
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   FB           MOV     R3,A
   \   0001CD   90....       MOV     DPTR,#App_TaskID
   \   0001D0   E0           MOVX    A,@DPTR
   \   0001D1   F9           MOV     R1,A
   \   0001D2   12....       LCALL   ??osal_msg_send?relay
   \   0001D5   8008         SJMP    ??MT_UartProcessZToolData_14
    295                  }
    296                  else
    297                  {
    298                    /* deallocate the msg */
    299                    osal_msg_deallocate ( (uint8 *)pMsg );
   \                     ??MT_UartProcessZToolData_13:
   \   0001D7                ; Setup parameters for call to function osal_msg_deallocate
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   FA           MOV     R2,A
   \   0001D9   A3           INC     DPTR
   \   0001DA   E0           MOVX    A,@DPTR
   \   0001DB   FB           MOV     R3,A
   \   0001DC   12....       LCALL   ??osal_msg_deallocate?relay
    300                  }
    301          
    302                  /* Reset the state, send or discard the buffers at this point */
    303                  state = SOP_STATE;
   \                     ??MT_UartProcessZToolData_14:
   \   0001DF   90....       MOV     DPTR,#state
   \   0001E2   E4           CLR     A
   \   0001E3   02....       LJMP    ??MT_UartProcessZToolData_2 & 0xFFFF
    304          
    305                  break;
    306          
    307                default:
    308                 break;
    309              }
    310            }
    311          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_allocate
   \   000001                ; Setup parameters for call to function MT_UartCalcFCS
   \   000001   90....       MOV     DPTR,#LEN_Token
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#pMsg
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FA           MOV     R2,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F583         MOV     DPH,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3400         ADDC    A,#0x0
   \   000007   8A82         MOV     DPL,R2
   \   000009   F583         MOV     DPH,A
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartRegisterTaskID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartRegisterTaskID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartCalcFCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartCalcFCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UartProcessZToolData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UartProcessZToolData
    312          
    313          #if defined (ZAPP_P1) || defined (ZAPP_P2)
    314          /***************************************************************************************************
    315           * @fn      MT_UartProcessZAppData
    316           *
    317           * @brief   | SOP | CMD  |   Data Length   | FSC  |
    318           *          |  1  |  2   |       1         |  1   |
    319           *
    320           *          Parses the data and determine either is SPI or just simply serial data
    321           *          then send the data to correct place (MT or APP)
    322           *
    323           * @param   port    - UART port
    324           *          event   - Event that causes the callback
    325           *
    326           *
    327           * @return  None
    328           ***************************************************************************************************/
    329          void MT_UartProcessZAppData ( uint8 port, uint8 event )
    330          {
    331          
    332            osal_event_hdr_t  *msg_ptr;
    333            uint16 length = 0;
    334            uint16 rxBufLen  = Hal_UART_RxBufLen(MT_UART_DEFAULT_PORT);
    335          
    336            /*
    337               If maxZAppBufferLength is 0 or larger than current length
    338               the entire length of the current buffer is returned.
    339            */
    340            if ((MT_UartMaxZAppBufLen != 0) && (MT_UartMaxZAppBufLen <= rxBufLen))
    341            {
    342              length = MT_UartMaxZAppBufLen;
    343            }
    344            else
    345            {
    346              length = rxBufLen;
    347            }
    348          
    349            /* Verify events */
    350            if (event == HAL_UART_TX_FULL)
    351            {
    352              // Do something when TX if full
    353              return;
    354            }
    355          
    356            if (event & ( HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
    357            {
    358              if ( App_TaskID )
    359              {
    360                /*
    361                   If Application is ready to receive and there is something
    362                   in the Rx buffer then send it up
    363                */
    364                if ((MT_UartZAppRxStatus == MT_UART_ZAPP_RX_READY ) && (length != 0))
    365                {
    366                  /* Disable App flow control until it processes the current data */
    367                   MT_UartAppFlowControl (MT_UART_ZAPP_RX_NOT_READY);
    368          
    369                  /* 2 more bytes are added, 1 for CMD type, other for length */
    370                  msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( length + sizeof(osal_event_hdr_t) );
    371                  if ( msg_ptr )
    372                  {
    373                    msg_ptr->event = SPI_INCOMING_ZAPP_DATA;
    374                    msg_ptr->status = length;
    375          
    376                    /* Read the data of Rx buffer */
    377                    HalUARTRead( MT_UART_DEFAULT_PORT, (uint8 *)(msg_ptr + 1), length );
    378          
    379                    /* Send the raw data to application...or where ever */
    380                    osal_msg_send( App_TaskID, (uint8 *)msg_ptr );
    381                  }
    382                }
    383              }
    384            }
    385          }
    386          
    387          /***************************************************************************************************
    388           * @fn      SPIMgr_ZAppBufferLengthRegister
    389           *
    390           * @brief
    391           *
    392           * @param   maxLen - Max Length that the application wants at a time
    393           *
    394           * @return  None
    395           *
    396           ***************************************************************************************************/
    397          void MT_UartZAppBufferLengthRegister ( uint16 maxLen )
    398          {
    399            /* If the maxLen is larger than the RX buff, something is not right */
    400            if (maxLen <= MT_UART_DEFAULT_MAX_RX_BUFF)
    401              MT_UartMaxZAppBufLen = maxLen;
    402            else
    403              MT_UartMaxZAppBufLen = 1; /* default is 1 byte */
    404          }
    405          
    406          /***************************************************************************************************
    407           * @fn      SPIMgr_AppFlowControl
    408           *
    409           * @brief
    410           *
    411           * @param   status - ready to send or not
    412           *
    413           * @return  None
    414           *
    415           ***************************************************************************************************/
    416          void MT_UartAppFlowControl ( bool status )
    417          {
    418          
    419            /* Make sure only update if needed */
    420            if (status != MT_UartZAppRxStatus )
    421            {
    422              MT_UartZAppRxStatus = status;
    423            }
    424          
    425            /* App is ready to read again, ProcessZAppData have to be triggered too */
    426            if (status == MT_UART_ZAPP_RX_READY)
    427            {
    428              MT_UartProcessZAppData (MT_UART_DEFAULT_PORT, HAL_UART_RX_TIMEOUT );
    429            }
    430          
    431          }
    432          
    433          #endif //ZAPP
    434          
    435          /***************************************************************************************************
    436          ***************************************************************************************************/

   Maximum stack usage in bytes:

     Function                 ISTACK PSTACK XSTACK
     --------                 ------ ------ ------
     MT_UartCalcFCS               2      0     11
     MT_UartInit                  2      0     29
       -> HalUARTOpen             4      0     58
       -> HalUARTOpen             4      0     58
     MT_UartProcessZToolData      1      0     11
       -> Hal_UART_RxBufLen       0      0     22
       -> HalUARTRead             0      0     22
       -> osal_msg_allocate       0      0     22
       -> Hal_UART_RxBufLen       0      0     22
       -> HalUARTRead             0      0     22
       -> HalUARTRead             0      0     22
       -> MT_UartCalcFCS          0      0     22
       -> osal_msg_send           0      0     22
       -> osal_msg_deallocate     0      0     22
     MT_UartRegisterTaskID        2      0      0


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     App_TaskID                         1
     state                              1
     CMD_Token                          2
     LEN_Token                          1
     FSC_Token                          1
     pMsg                               2
     tempDataLen                        1
     MT_UartInit                      121
     ?Subroutine0                       7
     ?Subroutine2                      12
     MT_UartRegisterTaskID             11
     MT_UartCalcFCS                    33
     MT_UartProcessZToolData          486
     ?Subroutine6                       4
     ?Subroutine7                       9
     ?Subroutine5                       6
     ?Subroutine4                       6
     ?Subroutine3                      14
     ?Subroutine1                      15
     ??MT_UartInit?relay                6
     ??MT_UartRegisterTaskID?relay      6
     ??MT_UartCalcFCS?relay             6
     ??MT_UartProcessZToolData?relay    6

 
 724 bytes in segment BANKED_CODE
  24 bytes in segment BANK_RELAYS
   9 bytes in segment XDATA_Z
 
 748 bytes of CODE  memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
